<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Six Impossible Things Before Bundling</title>
		<description>Nothing can possibly go wrong. Nothing can possi... *snap*</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Yak Shaving Sometimes Needs Chainsaws</title>
				<description>&lt;p&gt;Metaphorically, of course; no actual animals (yaks, infestors, or executives) were harmed in the creation of this blog post. Thanks to &lt;a href=&quot;https://kellysutton.com&quot;&gt;Kelly Sutton&lt;/a&gt;, whose posts are nearly always good reading, and whose post &lt;a href=&quot;https://kellysutton.com/2019/10/23/framework-product-and-technology.html&quot;&gt;&lt;em&gt;A Framework for Making Technology-Product Decisions&lt;/em&gt;&lt;/a&gt; in particular got me thinking about several herds of yaks that have dominated one of our product efforts since its inception.&lt;/p&gt;

&lt;p&gt;In terms of &lt;a href=&quot;https://kellysutton.com/2019/10/23/framework-product-and-technology.html#the-framework&quot;&gt;the framework&lt;/a&gt;, this project (hereafter, The Product) has spent its entire existence alternating between &lt;em&gt;Executing&lt;/em&gt; and &lt;em&gt;Replacing&lt;/em&gt;, in the view of its most senior stakeholder, and firmly anchored &lt;em&gt;Out on a Limb&lt;/em&gt; in reality. Part of this has been due to the immaturity and questionable interoperability of the available/known tools with The Vision™ for The Product, which was not helped by both The Visionary and the “lead” (sole) developer being far more confident in Web 1.0 back-end/static-front-end dichotomy when what was actually needed essentially requires a dynamic front end and a slimmer, probably API-encapsulated back end. Being focussed on maximising hours of effort to utterly, ridiculously, &lt;em&gt;catastrophically&lt;/em&gt; destructive levels caused The Product to fail, although nobody associated with it at the time recognised that. For well over three years, the developer was putting in 90+-hour-weeks doing epic battle with the most immediately-obvious blocking tactical issue; the long-promised help, including from the “technical CEO” that was promised in exchange for that developer not walking out six months into The Burnout Inferno, never arrived. (Sili Valley Syndrome dies &lt;em&gt;hard&lt;/em&gt;, no matter the geographical distance between the patient and coastal California.)&lt;/p&gt;

&lt;p&gt;Worse still, all this effort and time failed to yield a deployed, demoable system. Instead, a dozen or so &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-driven_design#Bounded_context&quot;&gt;bounded contexts&lt;/a&gt; forming the &lt;em&gt;basis&lt;/em&gt; of demoable features were developed, usually multiple times. (This is as close as The Product got to &lt;em&gt;Replacing&lt;/em&gt;, in Sutton’s framework, except that the framework use implies replacing bits of an existing, working system.)&lt;/p&gt;

&lt;h3 id=&quot;lessons-painfully-relearned&quot;&gt;Lessons Painfully Relearned&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Lesson One:&lt;/strong&gt; &lt;em&gt;Never&lt;/em&gt; attempt a would-be commercial project with a team below the minimum that can be reasonably expected to achieve the mission within the allotted time with 30 hours or so of actual development work per developer per week.&lt;/p&gt;

&lt;p&gt;If you’re working 50 hours a week in a creative role, let alone 90+, you’re making &lt;em&gt;far less&lt;/em&gt; real progress toward your goal than if you’re putting in a solid, well-rested, collaborative ~30-35. This has been known to industry and academia for nearly a century now; ignoring it should be treated as any other form of management malfeasance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson Two:&lt;/strong&gt; If you can’t deploy The Product, no matter how incomplete it is, right &lt;em&gt;now&lt;/em&gt;, then how do you know you’ll &lt;em&gt;ever&lt;/em&gt; be able to?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[It] &lt;strong&gt;doesn’t matter&lt;/strong&gt; how great your idea is if you can’t build and deploy it to users. — &lt;a href=&quot;https://twitter.com/nkkl/&quot;&gt;Nikki Lee&lt;/a&gt; on Twitter; &lt;a href=&quot;https://twitter.com/nkkl/status/952995627842994176&quot;&gt;January, 2018&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, emphasis added; Twitter doesn’t do Markdown. Still, something every PM, dev, and manager in a development org and its C-suite needs to get through their individual and collective skulls as regularly as needed for it to stick.&lt;/p&gt;

&lt;p&gt;One of the greatest trends in software for the last decade or so has been &lt;a href=&quot;https://en.wikipedia.org/wiki/DevOps&quot;&gt;DevOps&lt;/a&gt;: the combination of software development with cross-function IT operations and deployment to shorten delivery cycles and improved quality, since bugs can be found and fixed more quickly, and sub-par approaches re-evaluated &lt;em&gt;in the context of&lt;/em&gt; working code. Also, by automating deployment tasks, you empower your team to deploy “whenever we’re ready to put something new up there”, rather than waiting for periodic, scheduled “big bang” deploys (which carry higher risk).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Even if all you have so far is “Hello, World”, prove that you can deploy &lt;strong&gt;that&lt;/strong&gt; and then flesh out your Obviously Valuable Software.&lt;/em&gt; A sure sign of Sili Valley Syndrome is talk of software patents and other such frippery before you can even demonstrate that you have anything &lt;em&gt;worth&lt;/em&gt; protecting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson Two (Corollary):&lt;/strong&gt; If the automated testing and deploment of The Product (from Lesson Two, above) requires more than one action to be taken manually, then its deployment &lt;em&gt;will&lt;/em&gt; eventually fail. You can, in a pinch, &lt;em&gt;start out with&lt;/em&gt; a fully-documented process involving multiple manual actions. However, an issue with the highest priority your issue-tracking system supports &lt;strong&gt;should/must&lt;/strong&gt; be opened &lt;em&gt;and remain open&lt;/em&gt; until you’re down to that one manual action; ideally something as idiot-proof as clicking a button. If you make two consecutive deployments without any progress towards fully automating the test and deployment processes, consider &lt;em&gt;that&lt;/em&gt; a serious defect in your process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson Three:&lt;/strong&gt; Following on from the above, use the most mature, well-supported (aka &lt;a href=&quot;https://tqdev.com/2018-the-boring-software-manifesto&quot;&gt;&lt;em&gt;boring&lt;/em&gt;&lt;/a&gt;) tools for development and deployment that can achieve your purpose.&lt;/p&gt;

&lt;p&gt;Yes, this means that your deployment capabilities should &lt;del&gt;influence&lt;/del&gt;filter development choices such as language and tech stack. You may (think you) know what you &lt;em&gt;want&lt;/em&gt; your development and deployment stacks to look like in The Glorious Future™ well enough to comfortably invest time and resources in getting yourself closer to that ideal; unless you’re &lt;em&gt;confident&lt;/em&gt; you can get from here to there in a reasonably-fixed amount of time &lt;em&gt;based on both research and experience&lt;/em&gt;, don’t turn that investment into a blocking, functionally bottomless time sink.&lt;/p&gt;

&lt;h3 id=&quot;ready-fireoh-go-ahead-and-aim&quot;&gt;Ready, Fire…Oh, Go Ahead and Aim&lt;/h3&gt;

&lt;p&gt;Looking back at &lt;a href=&quot;https://kellysutton.com/2019/10/23/framework-product-and-technology.html#the-framework&quot;&gt;the framework&lt;/a&gt; with which this post started, how best to get from here to there with respect to The Product?&lt;/p&gt;

&lt;h4 id=&quot;if-youre-not-doing-ci-automated-testing-fix-that-first&quot;&gt;If you’re not doing CI-automated testing, fix that first&lt;/h4&gt;

&lt;p&gt;If you’re not testing (close enough to everything), you &lt;em&gt;can’t&lt;/em&gt; know what you have, and refactoring is much harder &lt;em&gt;and riskier&lt;/em&gt; than it needs to be. If you’re not reliably testing on every commit by default, then sooner or later, serious, or merely embarrassing, defects will creep in, not to be caught before the Big Demo for the people you only get one shot at impressing. Don’t take that shot with a footgun.&lt;/p&gt;

&lt;h4 id=&quot;take-a-cue-from-tattoo&quot;&gt;Take a cue from &lt;a href=&quot;https://en.wikipedia.org/wiki/Fantasy_Island&quot;&gt;Tattoo&lt;/a&gt;:&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Deploy, boss, deploy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if that deployment is completely manual at first, document it (and recovery from failures experienced along the way) and incrementally automate it as time goes on. You may have goals of single-button automation using &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;, &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;, or other such tools, but give Braintree’s &lt;a href=&quot;https://github.com/braintree/runbook&quot;&gt;Runbook&lt;/a&gt; a look as a “baby step” along the way.&lt;/p&gt;

&lt;p&gt;Remember, even if you don’t have a “real app” yet, but you have some idea of what the first few versions of your “real app” might look like (language, database, other services, etc), make it deploy or go home.&lt;/p&gt;

&lt;h4 id=&quot;re-evaluate-how-the-product-uses-or-attempts-to-use-the-latest-shiny-new-or-new-to-you-tools&quot;&gt;Re-evaluate how The Product uses, or attempts to use, the latest Shiny New (or New-to-You) Tools.&lt;/h4&gt;

&lt;p&gt;Do this regardless of overall/longer-term expected value to The Product.&lt;/p&gt;

&lt;p&gt;For example, Docker for staging/production deployment is &lt;em&gt;highly likely&lt;/em&gt; to be a Good Thing, as it virtually guarantees repeatability, but can you adequately and reliably deploy without it? Is there &lt;em&gt;sufficient benefit&lt;/em&gt; to build a set of Docker images before CI testing against them, or can you comfortably defer building those images until after CI testing blesses their contents?&lt;/p&gt;

&lt;p&gt;Another consideration is team size. Docker and Kubernetes have been shown both in direct experience and in the literature to be highly challenging to individuals or small teams. On the one hand, learning a stack such as Docker, Kubernetes, and Helm is daunting, to say the least, for small teams lacking experience with the stack. On the other hand, “buying into” a provider platform such as AWS or Azure can feel risky because the team don’t fully understand the stack well enough to assure stakeholders that they understand the risks and tradeoffs involved in such platforms — especially when such platforms often feel designed to sell consultant billable hours.&lt;/p&gt;

&lt;p&gt;Hence, deployment and DevOps in general feel risky and uncertain, often leading to the preservation of manual processes far beyond what is strictly necessary, risking brittle, inefficient deployments.&lt;/p&gt;

&lt;h4 id=&quot;iterate-early-and-frequently-keeping-feature-or-bugfix-branches-as-short-in-duration-as-practical&quot;&gt;Iterate early and frequently, keeping feature or bugfix branches as short in duration as practical&lt;/h4&gt;

&lt;p&gt;If your feature branch lasts more than a few days (let alone a few &lt;em&gt;months&lt;/em&gt;, as has too often been the case), you’re Doing It Wrong. Exploratory R&amp;amp;D is a necessary thing; just don’t confuse it with feature development. The &lt;em&gt;whole point&lt;/em&gt; of agile development is to demonstrate value early, incrementally working towards the highest-value “next feature” that can be deployed and demonstrated. (Remember, if you can’t deploy, it’s &lt;em&gt;awfully&lt;/em&gt; hard to credibly demonstrate.)&lt;/p&gt;

&lt;h4 id=&quot;use-a-coherent-established-git-branching-model&quot;&gt;Use a coherent, established &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; branching model.&lt;/h4&gt;

&lt;p&gt;Vincent Driessen’s &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;original model&lt;/a&gt; has gained significant use over the last decade, largely because it provides an understandable, easy-to-use structure differentiating progress done between formal releases (on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; branch) from those releases (on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;) which, among other things, provide a near-last-ditch fallback to get to a “known good” point, after which work along &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; can proceed anew. It also importantly draws distinction between branches dedicated to new features, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release&lt;/code&gt; branches, where work needed to comply with shop standards for formal releases, such as updating documentation, are carried out (along with possible minor bug fixes but no new features), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; branches from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; to provide an emergency fix to a critical problem; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; branches are merged back into &lt;em&gt;both&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; and an existing release branch (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; if no such branch exists).&lt;/p&gt;

&lt;p&gt;We presently use Peter van der Does’ &lt;a href=&quot;https://github.com/petervanderdoes/gitflow-avh&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gitflow-avh&lt;/code&gt; variant&lt;/a&gt;, supplemented with manual branching for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;research&lt;/code&gt; (“How do we use this tool or component to make development easier or more capable?) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wip&lt;/code&gt; (“This feature may take a while to figure out a good way to implement properly; let’s have the branch indicate this”). You can use van der Does’ variant as is; Driessen’s &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;original&lt;/a&gt;; or any of the &lt;a href=&quot;https://github.com/nvie/gitflow/network/members&quot;&gt;thousands of forks&lt;/a&gt; of Driessen’s implementation; whatever adequately serves your needs.&lt;/p&gt;

&lt;p&gt;Notably, van der Does’ &lt;a href=&quot;https://github.com/petervanderdoes/gitflow-avh&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gitflow-avh&lt;/code&gt;&lt;/a&gt; fork reifies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;support&lt;/code&gt; branches, which (among other uses) are a handy place to have more formalised/non-emergency rework of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; releases.&lt;/p&gt;

&lt;p&gt;Bug fixes are treated by both Driessen’s and van der Does’ models as though they were features; e.g., a branch such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature-1145-fix-broken-twitter-integration&lt;/code&gt; references the hypothetical GitHub Issue #1145 for the repo, where the “broken Twitter integration” bug discussion is recorded.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, in the last couple of years, &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;GitHub flow&lt;/a&gt; and &lt;a href=&quot;https://docs.gitlab.com/ee/topics/gitlab_flow.html#introduction-to-gitlab-flow&quot;&gt;GitLab flow&lt;/a&gt; have gained significant traction, largely in reaction to the complexity of Driessen’s (and variants’) flow models. While both GitHub and GitLab have a greater degree of cultural/institutional support for their associated flow models, neither model is intrinsically tied to its namesake service. I recommend at least browsing through the docs for each model and looking for projects that use them before committing to a moswl for your project. Shifting from the Driessen-style models to either GitLab or GitHub flow initially &lt;em&gt;looks&lt;/em&gt; like it could be tricky, especially for a project with a large number of feature/exploratory branches. It &lt;em&gt;should&lt;/em&gt; be possible to make the transition simply by ensuring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; is up-to-date, with completed feature/etc branches merged, and then merge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; and proceed with your new flow model from there. Less risky, obviously, would simply be to experiment with a small greenfield project. (Isn’t that always the case? 🤓)&lt;/p&gt;

&lt;h4 id=&quot;use-different-virtual-hosts-or-feature-flags-to-deploy-and-test-one-or-more-branches&quot;&gt;Use different virtual hosts or feature flags to deploy and test one or more branches&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://featureflags.io/ruby-feature-flags/&quot;&gt;Feature flags&lt;/a&gt; and/or different vhosts support deployment and testing of one or more branches in addition to the currently known-working “main” branch. This lets the team hide new code from all but selected users (using feature flags) or physically separate different deployments (using vhosts).&lt;/p&gt;

&lt;p&gt;This is part of what’s needed to evolve past initial “production” or release-candidate status, and proving the capability, even trivially, early on will yield sufficient rewards (confidence, control, etc) as The Product becomes more featureful to justify a moderate amount of invested time early on, when The Product is most trivially subject to differentiation.&lt;/p&gt;

&lt;p&gt;“Why bother”, you might reasonably ask. “After all, up to now, we’ve only worked on one feature at a time”. While true, that’s also &lt;em&gt;not&lt;/em&gt; a good thing, especially when multiple new or reworked features have been identified. When work on one feature stalls as mental fatigue sets in, switching off to work on something else, &lt;em&gt;independently of&lt;/em&gt; the first feature with regard to development, test, CI, and deployment, can keep things moving along even with the historically highly sub-minimal teams doing the actual work.&lt;/p&gt;

&lt;h3 id=&quot;where-to-go-from-here&quot;&gt;Where to Go From Here&lt;/h3&gt;

&lt;p&gt;Yes, code currently exists for The Product, in an absolutely vestigial, low-value-added state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, is the existing code an asset or an artefact of learning that can best be set aside and replaced? (The &lt;a href=&quot;https://en.wikipedia.org/wiki/Sunk_cost#Concorde_effect&quot;&gt;Concorde effect&lt;/a&gt;, or sunk-cost fallacy, is not limited to multi-billion-euro hardware efforts.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, obviously, perform any &lt;a href=&quot;#ready-fireoh-go-ahead-and-aim&quot;&gt;&lt;em&gt;Ready, Fire…&lt;/em&gt;&lt;/a&gt; tasks that haven’t yet been done. (If the outcome of the first step is “cut and redo”, then of course &lt;em&gt;none&lt;/em&gt; of them will have been yet done for this iteration.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, list out the known tasks yet to be done, using a tool like &lt;a href=&quot;https://trello.com/&quot;&gt;Trello&lt;/a&gt;, &lt;a href=&quot;https://help.github.com/en/github/managing-your-work-on-github/about-project-boards&quot;&gt;GitHub project boards&lt;/a&gt;, or other such Kanban-type task organiser to list, describe, and prioritise tasks. This will be a “living document” throughout development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fourth&lt;/strong&gt;, build a simplest-possible app and get its automated CI testing working and documented. This is a good thing &lt;em&gt;even if&lt;/em&gt; you have an existing CI setup for an earlier app; how confident are you that you can hand things off to a newly-onboarded dev or to a quasi-technical senior stakeholder and they’ll be able to make it Just Work? (&lt;em&gt;Hint:&lt;/em&gt; This is a great use for &lt;a href=&quot;https://github.com/braintree/runbook&quot;&gt;Runbook&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;One idea worth considering at this point, if not at “First”, above, is the idea of “peak Ruby”, which several community thought leaders have placed as circa 2009. This can be interpreted either as “Ruby is a mature, boring language with a mature, stable ecosystem” &lt;em&gt;or&lt;/em&gt; as “Important segments of what was the circa-2009 Ruby community have moved on to new systems (notably Elixir, Rust, Go and, to a lesser degree, Node.js) for Reasons.” Those “Reasons” include, but are not limited to,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the relative ease of deploying and maintaining container-based applications using a single, compiled artefact (see, e.g., &lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/&quot;&gt;Docker multi-stage builds&lt;/a&gt; whicn generally produce smaller final images);&lt;/li&gt;
  &lt;li&gt;the fact that Ruby is a single-threaded system unless relatively elaborate steps are taken to work around the &lt;a href=&quot;https://ablogaboutcode.com/2012/02/06/the-ruby-global-interpreter-lock&quot;&gt;Global Interpreter Lock&lt;/a&gt;), running on ubiquitously multi-core if not multi-processor systems;&lt;/li&gt;
  &lt;li&gt;the lack of a native, fluent static-type system in Ruby which is highly useful both for catching bugs prior to runtime, and for expressing data types and interfaces using The Product’s &lt;a href=&quot;https://www.martinfowler.com/bliki/UbiquitousLanguage.html&quot;&gt;Ubiquitous Language(s)&lt;/a&gt;, rather than native types, to reduce ambiguity in development and maintenance;&lt;/li&gt;
  &lt;li&gt;Ruby may be seen as a reasonably “boring” language now compared to its volatility from 2003-2013 (when Versions 1.8.&lt;em&gt;x&lt;/em&gt;.&lt;em&gt;y&lt;/em&gt; and then 1.9.&lt;em&gt;v&lt;/em&gt;.&lt;em&gt;w&lt;/em&gt; were current), but breaking changes were introduced again in the 2.7 release (2019) and are planned for Version 3.0 in late 2020. Not all tools in the ecosystem, notably several widely-used Gems, have yet cleanly supported Ruby 2.7. Support for 3.0, presently in prerelease form, is highly uneven;&lt;/li&gt;
  &lt;li&gt;and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recall “Lesson Three”, above, and its observation that “your deployment capabilities should filter development choices” rather than the other way around. (This in itself is responsible for &lt;em&gt;months&lt;/em&gt; of delays in The Product.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fifth&lt;/strong&gt; and subsequently, adopt a fixed-length “sprint” development methodology. A new or updated feature should be deployed and demoable every &lt;em&gt;x&lt;/em&gt; calendar weeks, where &lt;em&gt;x&lt;/em&gt; is commonly two weeks (rarely, four). Fully implementing a non-trivial feature &lt;em&gt;may&lt;/em&gt; take multiple sprints; however, the different between The Product at the end of a sprint and its immediately-preceding sprint must be testable and demoable. (Feature flags are handy here, too, for easily allowing sequential or side-by-side demonstrations of the new code.) This will &lt;em&gt;often&lt;/em&gt; require cutting down the focus of an individual sprint-in-progress from, say, “Implement comparison of different versions of a document, showing changes made and their authors”, to “Support presentation of the editing history of a document”, followed by “Support display of a selected version of a document, noting the changes since its immediately-preceding version”, and then “Show differences between two arbitrary versions of a document, defaulting to the initial and latest versions, including detailed display of its changes and authors over time.”&lt;/p&gt;

&lt;p&gt;Adopting this or a functionally equivalent development and deployment process will make The Product much less likely to languish for months (or longer) in “the wilderness”, wandering aimlessly in search of a hoped-for but poorly-understood sequence of destinations. This, plus a more humane, realistic work-life balance, would significantly increase The Product’s odds of success after so mind-bendingly long.&lt;/p&gt;

&lt;p&gt;Staffing up to competent levels wouldn’t hurt, either.&lt;/p&gt;
</description>
				<pubDate>Tue, 22 Sep 2020 00:00:00 +0800</pubDate>
				<link>/deployment/development/practices/2020/09/22/yak-shaving-sometimes-needs-chainsaws.html</link>
				<guid isPermaLink="true">/deployment/development/practices/2020/09/22/yak-shaving-sometimes-needs-chainsaws.html</guid>
			</item>
		
			<item>
				<title>In Defence of Use Cases, and the Service Objects Encapsulating Them</title>
				<description>&lt;h3 id=&quot;an-appetiser&quot;&gt;An Appetiser&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codewithjason.com/&quot;&gt;Code With Jason&lt;/a&gt; is a generally &lt;em&gt;outstanding&lt;/em&gt; site where Jason Swett offers courses, tutorials, and opinion (generally) related to Rails and/or Ruby in general. Almost exactly a year ago as I write this, he posted a quite well-thought-through article, &lt;a href=&quot;https://www.codewithjason.com/rails-service-objects/&quot;&gt;&lt;em&gt;Beware of service objects in Rails&lt;/em&gt;&lt;/a&gt;. I agree with quite a lot of what he says. For example, I, too, treat class names ending in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-er&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MoneyManager&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CorrencyConverter&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WishGranter&lt;/code&gt;) as code smells until proven unavoidably otherwise. (I haven’t seen such an &lt;em&gt;unavoidable otherwise&lt;/em&gt; counter-example in &lt;em&gt;decades&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;However, I’ve been on teams that have effectively used use cases (more typically for the last ~30 years, Jacobson &lt;a href=&quot;https://en.wikipedia.org/wiki/Use_case&quot;&gt;&lt;em&gt;use cases&lt;/em&gt;&lt;/a&gt;). These have been in a variety of languages, from C and its derivatives; to OO languages like Ruby, Objective-C and Delphi; to functional languages like Scheme and Elixir (in which I’m still far closer to the novice end of the spectrum than I’d like). I say all this to give some clue as to how my (too often self-)education as a software (and, in recent decades, Web) developer has progressed. I was working with Rails from 2.1.&lt;em&gt;something&lt;/em&gt; up to 4.1.0, followed by a segue into other frameworks until some recent 6.0.3.&lt;em&gt;x&lt;/em&gt; work. I don’t claim to be a modern Rails expert yet (I’ve been working on &lt;a href=&quot;https://hanamirb.org/&quot;&gt;Hanami&lt;/a&gt; code for the last couple of years), but I’ve done enough OO in Rails, Ruby, and elsewhere to have formed opinions. (My current touchstone is Clean Architecture, but that’s a whole other series of posts.)&lt;/p&gt;

&lt;p&gt;What follows was drafted in late October, 2019, as an open letter and/or rant in reaction to Jason’s &lt;a href=&quot;https://www.codewithjason.com/organizing-rails-projects-domain-objects-good-service-objects-bad/&quot;&gt;post&lt;/a&gt;, with relatively minor revision and expansion in September, 2020.&lt;/p&gt;

&lt;p&gt;References to “we” and “our” denote usage and standards for the small startup where I serve as Chief Engineer and director of all technology-related work (development, quality engineering, dev/ops automation, etc.). Occasionally, I refer to myself individually, using a first-person pronoun.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;discussion-is-served&quot;&gt;Discussion is Served&lt;/h3&gt;

&lt;p&gt;We’ve been using service objects in Ruby for a few years now; I’ve previously used them in a wide range of other languages, OO and otherwise. Given a bit of reasonable self-discipline (perhaps best supported by the &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Architecture&lt;/a&gt;), they can be really effective. But I agree with your dings against the examples, to the point where they almost might be considered straw-men were it not for the fact that they are too likely in production code running somewhere. I’d like to argue for use of the concept within limits, by riffing on a few of our&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use cases are implemented in one or more cooperating service objects.&lt;/strong&gt; A &lt;em&gt;use case&lt;/em&gt; encapsulates an action performed by or on behalf of a user. &lt;em&gt;Register as Member&lt;/em&gt;, &lt;em&gt;Publish Article&lt;/em&gt;, and &lt;em&gt;Respond to Proposed Contribution&lt;/em&gt; are use cases that each make use of one or more service objects (which generally, as is traditional, have a single entry point which returns a “result” object encapsulating the success/failure result of the service usage, along with appropriate entities on success or error information on failure. These are black boxes into which necessary dependencies are injected along with the per-use parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Service objects should be &lt;em&gt;pure domain logic&lt;/em&gt;.&lt;/strong&gt; Any outer-ring (to use &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Architecture&lt;/a&gt; imagery), such as frameworks, databases, and the like, are to be either injected or wrapped around the use of the service object itself. Your TopTal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CurrencyExchanger&lt;/code&gt; example is flat-out egregious, and in my opinion, at least, should never have passed anybody’s code review. You do an excellent job of damning it by visibly pulling several of your punches.&lt;/p&gt;

&lt;p&gt;The point of using a use-case-driven approach leveraging service objects is to minimise both the cognitive load on the developer (oberwhelmingly singular) working on that code at the moment, as well as to isolate it from the rest of the application, preventing Debugging Whac-A-Mole&lt;sup&gt;®&lt;/sup&gt; as the hapless developer has to stop and think (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt;) to figure out why data that “has no good reason to change” &lt;em&gt;is&lt;/em&gt; changing. After four decades in this craft, I have yet to meet a developer who’s shipped at least one academically or commercially interesting product who hasn’t beaten her head against &lt;em&gt;that&lt;/em&gt; at least once.&lt;/p&gt;

&lt;p&gt;One of the defining bullet points for OOP, remember, is &lt;em&gt;encapsulation&lt;/em&gt;. Good architecture, Clean or otherwise, applies that at larger scale than the individual class. That is a nearly insurmountable challenge when attempting to maintain a legacy Rails app written in the traditional Rails Way.&lt;/p&gt;

&lt;p&gt;Models and controllers, themselves, simply don’t have the necessary depth to fully delineate a sustainable architecture for modern applications. For a post-2010 or so product, you’re going to have to add at least one more layer in a hopefully successful attempt to keep your developers reasonably sane and your schedule-focused managers reasonably appeased. We believe that taking well-defined and -understandable concepts that have been proven in production is highly preferable to a one-off, everybody-does-it-their-own-way approach. DHH may well rail against anything that adds layers to the original NVC-style layout, but I’ll bet Basecamp uses something recognisable as service objects — even if they’re wrapped up in separately-deployable “microservices”. That just takes the service object out of the monolith and puts it on the other end of an HTTP or RPC connection that &lt;em&gt;can&lt;/em&gt; fail.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;
</description>
				<pubDate>Tue, 22 Sep 2020 00:00:00 +0800</pubDate>
				<link>/development/practices/2020/09/22/in-defence-of-use-cases-and-service-objects.html</link>
				<guid isPermaLink="true">/development/practices/2020/09/22/in-defence-of-use-cases-and-service-objects.html</guid>
			</item>
		
			<item>
				<title>Hard-working CSRs Can't Fix Bad Policy</title>
				<description>&lt;p&gt;(N.B.: &lt;em&gt;CSR&lt;/em&gt; stands for “customer service representative”, if you’re one of the half-dozen Westerners who’ve never come across the abbreviation before.)&lt;/p&gt;

&lt;p&gt;I understand that any time a site is dealing with (at least potentially) money changing hands that there are regulations for good and imperative reasons. However,  &lt;em&gt;how&lt;/em&gt; those regulations are reflected in policy varies, considerably.&lt;/p&gt;

&lt;p&gt;This is a rant against a large, well-known online brand that sells everything from deadbolts to data services; let’s call them &lt;em&gt;Nile&lt;/em&gt;, to maintain plausible deniability.&lt;/p&gt;

&lt;p&gt;I lived in the US for several years until 2003; the last three or so of those in central/southern California. I then left, apparently permanently, and now call Singapore home. While last in California, I opened an account on Nile which I apparently haven’t used since. That account was tied to an email account which I still own and have access to on a global Web-mail service, and a phone number which I (obviously) no longer have access to and have long forgotten. In the years since, I’d forgotten that I’d even opened that account with Nile.&lt;/p&gt;

&lt;p&gt;I later (mid-2000s) opened an account with Nile using my personal-Web-site-affiliated email address, and located the Nile account in Singapore. (I foolishly/hurriedly failed to associate a phone number with that account, apparently thinking it would not be needed.) I’ve bought numerous items from Nile over the last 15 years or so using that account, and all seemed good.&lt;/p&gt;

&lt;p&gt;Today, however, was not so good. I bought an e-book on Nile, paid for it successfully using their click-once process, and then used the Nile book-reader app for the Mac to start reading. So far, so good. I &lt;em&gt;then&lt;/em&gt; decided I really ought to get something that had been on my buy-later list on Nile for some time, selected it from the list, clicked the “Add to cart” button, and then tried to check out. Nile asked me to re-enter my password. (Bear in mind that I’d just purchased an e-book less than 10 minutes earlier and had left the tab open, so Nile &lt;em&gt;should have known&lt;/em&gt; I was still me.) After making sure that I truly was still on Nile’s site (good URL; secure SSL connection with a valid certificate — click the ‘lock’ icon next to the URL in your browser), I entered my password (or rather copied it from my &lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt; vault, as always), I was met with an “invalid password” screen. I tried the copy-paste again, followed by manually typing the password as stored in 1Password. No joy.&lt;/p&gt;

&lt;p&gt;The real dragonfly in the ointment is that my “main” personal email address is down for a week or so from now; the hosting/email provider recently screwed up and then reinstalled everything, which of course meant that email has been effectively offline since…non-FAAMG recommendations &lt;em&gt;very&lt;/em&gt; welcome).&lt;/p&gt;

&lt;p&gt;I then called Nile’s customer-service number &lt;em&gt;in the US&lt;/em&gt; (remember, I’m on the other side of the planet) and talked to a very nice and patient Filipino CSR chap (much closer; very possibly also Singapore-based) who walked through trying to help me reset my password. When I told him that I wouldn’t have my main email back up for some time, he quite reasonably asked if there was another email address I could use. I had him try the account I mentioned at the beginning of this post with the well-known global email provider, and he said that I couldn’t use that one, as it was already tied to a (separate) Nile account. I then said “fine; I still own that email, so I’ll just try to log in to Nile and go through the password-reset using &lt;em&gt;that&lt;/em&gt;.” We then rang off, with a plan apparently formed.&lt;/p&gt;

&lt;p&gt;I then went to the Nile Website, logged out of the Singapore account, and tried to log in to the old, long-forgotten one. The password-reset sequence sent me an email with a link that I clicked on; this brought up a page prompting for the phone number associated with the (old, US-based) account, “helpfully” reminding me what the last two digits were.&lt;/p&gt;

&lt;p&gt;What the &lt;em&gt;actual…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I haven’t used that phone number in well over 15 years; I’d long since forgotten it (and purged it from the contact info on my computers).&lt;/p&gt;

&lt;p&gt;Then I remembered why I’d had to open a new Nile account in the first place.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Policy Failure One:&lt;/strong&gt; Nile wouldn’t let me change the country used for my billing address. People move around the US all the time, but nobody had apparently ever considered the possibility that someone could move &lt;em&gt;out&lt;/em&gt; of the US and still keep the same email address. (Ask people from most countries, and they’ll tell you that sort of thing happens all the time, even in long-ago pre-internet days.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Policy Failure Two:&lt;/strong&gt; Nile has no way to combine accounts. That is, even if they could satisfy themselves that I am the legitimate owner of both the antique US-based account and the current Singapore-based one, or if I opened a new (Singapore-based) account using an address from a &lt;em&gt;different&lt;/em&gt; email provider, there would be no way for my antique or newly-created Nile accounts to have access to the purchase history or other information of the existing Singapore-based account. It’s simply Not Allowed (which any Singaporean will be well-acquainted with, but that’s a &lt;em&gt;different&lt;/em&gt; catalogue of rants).&lt;/p&gt;

&lt;p&gt;So I’m back to finding a new hosting+email provider for my personal domain and accounts, and getting the domains and so on switched over (which usually takes a couple of days to fully percolate across the internet).&lt;/p&gt;

&lt;p&gt;Oh, yeah; what makes this all even &lt;em&gt;more&lt;/em&gt; tragicomically FUBAR than it already obviously is, is that later this year I expect to be transferred out of Singapore for the long term. Making &lt;em&gt;that&lt;/em&gt; change on Nile or any of the other FAAMGs &lt;em&gt;is not&lt;/em&gt; something I’m looking forward to.&lt;/p&gt;
</description>
				<pubDate>Sat, 01 Feb 2020 00:00:00 +0800</pubDate>
				<link>/life%20despite%20tech/2020/02/01/hardworking-csrs-cant-fix-bad-policy.html</link>
				<guid isPermaLink="true">/life%20despite%20tech/2020/02/01/hardworking-csrs-cant-fix-bad-policy.html</guid>
			</item>
		
			<item>
				<title>A Test Is Not A Unit Test If It Does Too Much</title>
				<description>&lt;p&gt;That, in a nutshell, appears to be the hammer that those arguing against Dave Cheney’s excellent Tweet that &lt;a href=&quot;https://twitter.com/davecheney/status/1178289934542655489&quot;&gt;A test is not a unit test if:&lt;/a&gt;. Allow me, folks, to offer some thought on why it’s so easy to mistake your head for a nail in this context.&lt;/p&gt;

&lt;p&gt;Taking Dave’s four points in order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;A test is not a unit test if it talks to the database.&lt;/em&gt; It’s an integration test, and the differences are important. The database access can fail for reasons &lt;em&gt;entirely unrelated&lt;/em&gt; to your attempted use of it; that is then duly reported as a test failure or worse (e.g., an error, exception, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MajorMalfunctionInstance&lt;/code&gt;, etc). &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=Assume&quot;&gt;Assuming&lt;/a&gt; that databases are unfailingly reliable does not make them so. This is particularly true in production, but a depressingly regular occurence in test environments as well.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;A test is not a unit test if it communicates across the network.&lt;/em&gt; The network is a world-class Heisenberg accumulator for the same reasons noted for the database in the previous point. Again, wishes don’t make it otherwise.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;A test is not a unit test if it can’t run at the same time as any of your other unit tests.&lt;/em&gt; This is usually because either your test relies on outside events happening in a certain sequence (and is therefore an integration test) or it relies on exclusive access to an outside resource. Each of these reasons moves it firmly from would-be unit-test identity into the nebulously uncertain world of integration tests.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;A test is not a unit test if you have to do special things to your environment to run it.&lt;/em&gt; This is a variation on the previous observation, usually relying on &lt;em&gt;both&lt;/em&gt; outside-event sequencing and exclusive resource access.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;“OK”, you might well be asking, “what &lt;em&gt;is&lt;/em&gt; a unit test, then?”&lt;/p&gt;

&lt;p&gt;A unit test depends &lt;em&gt;solely&lt;/em&gt; on the execution of &lt;em&gt;a&lt;/em&gt; logic path through the code under test leaving observable artefacts in a predicted state. Further, these artefacts &lt;em&gt;should not&lt;/em&gt; be global state, but changes of the state of the inputs to that logic and/or the value returned by that logic. Unit tests &lt;em&gt;don’t care&lt;/em&gt; if you’re running the same test a thousand times in sequence, or a thousand times in parallel; each execution of the test (again, given the same inputs) will produce the same output.&lt;/p&gt;

&lt;p&gt;“So how do I give the logic under test the resources it needs (and would have in production)” is the next question.&lt;/p&gt;

&lt;p&gt;The answer is dependency injection, as included in the &lt;a href=&quot;https://web.archive.org/web/20150905081103/http://www.objectmentor.com/resources/articles/dip.pdf&quot;&gt;Dependency Inversion Principle&lt;/a&gt; (the &lt;em&gt;D&lt;/em&gt; in &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot;&gt;SOLID&lt;/a&gt;) and, more explicitly, by the &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Architecture&lt;/a&gt;. If your code under test takes its dependencies as parameter inputs (or, alternately, uses a DI container), then the code doesn’t care if those dependencies are live resources (as in production) or test doubles. This becomes almost trivially easy in dynamic languages such as Ruby (“duck typing” is a thing) and JavaScript.&lt;/p&gt;

&lt;p&gt;“Hm. It still doesn’t sound all that useful. What would I use it for?”&lt;/p&gt;

&lt;p&gt;Let me draw your attention once again to that diagram of the &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Architecture&lt;/a&gt;, and then to the sections from &lt;em&gt;The Dependency Rule&lt;/em&gt; on down in that post. All your dependencies (database connections, UI mechanics, etc) are in the outer (blue) ring of the diagram, and pass control inwards. All code in the “business rules” rings receive and emit data; they don’t know or care where it comes from or where it’s going beyond the boundary layer they pull it from or send it to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Those&lt;/em&gt; layers can be usefully TDDed (or BDDed, if you prefer) by unit tests honouring Dave Cheney’s exclusions: they don’t talk to the database or network, they don’t touch the file system, and are independent of any other &lt;em&gt;unit tests&lt;/em&gt; running at the same time. The green &lt;em&gt;Interface Adapters&lt;/em&gt; ring is exercised by your integration tests, and the blue &lt;em&gt;Frameworks and Drivers&lt;/em&gt; ring by your system tests, since at that point you’re verifying that your understanding of how to make the database/Web framework/physical hardware interacts with the &lt;em&gt;already-proven&lt;/em&gt; inner rings is accurate and sufficient for your need.&lt;/p&gt;

&lt;p&gt;And, in real-world applications, these inner layers contain the real value that your application delivers to users. It isn’t a great app because it uses the trendiest new Web framework and both Postgres and the NoSQL database &lt;em&gt;du moment&lt;/em&gt;; it’s a great app because it &lt;em&gt;solves user problems in an effective, understandable, reasonable&lt;/em&gt; way. We, as a craft community, tend to completely, gleefully lose sight of, to the point where we curse anyone who tries to drag us back to that reality.&lt;/p&gt;

&lt;p&gt;That used to be understandable, if not very defensible; twenty or thirty years ago, there really wasn’t the understanding of how to cleanly separate an app into layers that were easy to reason about on their own, nor was there the language or hardware support for that layering that is readily available today. I’ve seen well-architected programs written for everything from the Raspberry Pi to your preferred desktop OS/environment to containerised apps to big-iron, high-volume mainframe apps. It &lt;em&gt;can&lt;/em&gt; be done and, after 40 years in this craft going from one extreme to others, it’s seemingly self-evident that “doing it” makes life (particularly during maintenance, after the superstar rock-star/ninja/quasigod consultants have cashed their cheques and left), &lt;em&gt;much&lt;/em&gt; more survivable to those who want to have a life that isn’t spent 24/7/365 in front of the screen, debugging in frustration.&lt;/p&gt;

&lt;p&gt;There are no magic bullets. But we’ve seen, over and over again, that there are numerous supplies of more than sufficient rope to shoot yourself in the foot. Don’t let architecture-that-isn’t be one of those.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;
</description>
				<pubDate>Tue, 01 Oct 2019 00:00:00 +0800</pubDate>
				<link>/development/practices/2019/10/01/a-test-is-not-a-unit-test-if.html</link>
				<guid isPermaLink="true">/development/practices/2019/10/01/a-test-is-not-a-unit-test-if.html</guid>
			</item>
		
			<item>
				<title>The Best Thing About GitHub Actions Is...</title>
				<description>&lt;p&gt;The best thing about GitHub Actions is, of course, the light they shine on how badly we’ve let ourselves, as an industry, be led down the garden path to do battle with some fundamental flaws in how we’ve been taught to do deployment (and, hence, development) over the last several years.&lt;/p&gt;

&lt;h2 id=&quot;a-brief-history-overview&quot;&gt;A (Brief) History Overview&lt;/h2&gt;

&lt;p&gt;This year marks 30 years since the publication of what Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration#History&quot;&gt;notes as&lt;/a&gt; the &lt;a href=&quot;https://ieeexplore.ieee.org/document/65147&quot;&gt;“earliest known work on continuous integration”&lt;/a&gt;, or &lt;em&gt;CI&lt;/em&gt;. It took a decade or two for it to become more widespread than controversial, but the vast majority of shops that a 2019-era developer should consider submitting her CV to now practice some form of CI, and a sizeable portion of those also practice automated &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;continuous delivery&lt;/a&gt;, if not fully &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_deployment&quot;&gt;continuous deployment&lt;/a&gt;. DevOps, which has been a common practice and/or a marketing buzzword for a decade now, is properly a superset of continuous deployment (CD).&lt;/p&gt;

&lt;p&gt;We, as a craft industry, have a &lt;em&gt;disastrous&lt;/em&gt; track record of integrating new practices into common workflows sufficiently well to see how evolving those workflows further might be impacted by the (current) capabilities and (current) limitations of tools widely used for those workflows. A prime example of this is many shops’ experience with CI/CD and &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When Docker first became widely popular, circa 2014-2015, most shops that had previously invested in automated CI and CD “rolled their own” scripts and tools for Docker-based testing and deployment. A number of both open-source and commercial projects were created or adapted to support Docker-based workflows, where the CI workflow built an image (usually a set of images; more on that later), run automated unit and acceptance tests against those images and, if successful, the CD workflow would deploy the image to a newly-provisioned server (usually a &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_private_server&quot;&gt;VPS instance&lt;/a&gt;) which could then be subject to further automated and/or manual testing in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Deployment_environment#Staging&quot;&gt;staging&lt;/a&gt; environment before being shifted into production using the CI-built image.&lt;/p&gt;

&lt;h2 id=&quot;whats-different-and-what-matters&quot;&gt;What’s Different and What Matters&lt;/h2&gt;

&lt;p&gt;A key point here that differentiates Docker-based workflows from many alternative CI/CD workflows is that deploying the &lt;em&gt;as-built-by-CI image(s)&lt;/em&gt; at the end of a successful chain of workflows is seen as a best practice. That serves as a guarantee that the software being deployed is bit-for-bit identical to the software that successfully passed build, unit, integration, and staging tests. This is what leads to multiple reports in the literature of organisations “deploying 50 times a day” or this 2011 presentation (&lt;a href=&quot;http://assets.en.oreilly.com/1/event/60/Velocity%20Culture%20Presentation.pdf&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;https://youtu.be/dxk8b9rSKOo&quot;&gt;YouTube&lt;/a&gt; discussing Amazon’s “velocity culture”; at the time, their mean time between production deployments was &lt;em&gt;11.6 seconds&lt;/em&gt;, with a maximum deployment &lt;em&gt;per hour&lt;/em&gt; of 1,079 hosts. (The 2019 numbers are, no doubt, considerably higher.)&lt;/p&gt;

&lt;p&gt;Your startup is not going to be the next Amazon (this quarter). &lt;em&gt;My&lt;/em&gt; startup is not going to be the next Amazon (this year). But stories like theirs are salutary because they show what is &lt;em&gt;possible&lt;/em&gt;, whereas the number and variety of “50 deployments per day” reports show what is &lt;em&gt;practical&lt;/em&gt;. And yet, as several often-critical observers have noted, “90%+ of automated CI and CD tools in production are bespoke”, implying a massive, and redundant, effort by (in practice) well-resourced and -led teams investing the staff-hours in reliable, repeatable testing and deployment. Thirty years ago, one of the favourite grey-beard horror stories of development was when the deputy junior assistant intern accidentally deployed his (usually partial) build to production, whereupon (expensive, career-limiting) &lt;a href=&quot;https://tvtropes.org/pmwiki/pmwiki.php/Main/HilarityEnsues&quot;&gt;hilarity ensued&lt;/a&gt;. One point repeatedly made by many of those “50 deploys” write-ups is that &lt;em&gt;anybody&lt;/em&gt; trusted to &lt;em&gt;write&lt;/em&gt; code is authorised to kick off a CI/CD workflow to test and deploy that code. Possibly to staging, but often to revenue production. This can only make business sense if the process (particularly testing) is proven to be so reliable that any problem &lt;em&gt;not&lt;/em&gt; caught by tests is seen primarily as a defect in the testing/deployment &lt;em&gt;process&lt;/em&gt;, for which the entire team is responsible — not simply the most junior developer wondering if he’ll keep his job long enough to collect a paycheque.&lt;/p&gt;

&lt;h2 id=&quot;so-whats-wrong&quot;&gt;So What’s Wrong?&lt;/h2&gt;

&lt;p&gt;What’s wrong is that, in &lt;a href=&quot;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#decouple-applications&quot;&gt;official Docker best practices&lt;/a&gt;, application deployments will usually be made up of multiple containers, with each addressing a single concern (the application itself, the database/persistence layer, caching, static asset serving, HTTPS termination and reverse proxying, etc). The long-time “standard” way to orchestrate such collections of containers is through &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_code&quot;&gt;&lt;em&gt;Infrastructure as Code&lt;/em&gt;&lt;/a&gt; tools like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; or, alternatively, &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Red Hat Ansible&lt;/a&gt; or HashiCorp &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;. Each of these tools have been used successfully in numerous “bespoke” CI/CD toolchains (their primary purpose). Getting them to work with off-the-shelf automation tools like &lt;a href=&quot;https://docs.gitlab.com/ee/ci/&quot;&gt;GitLab CI/CD&lt;/a&gt; and &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt;, to the point where they can be trusted for use by the aforementioned extremely junior developer, has proven to be “an interesting challenge”, to put it mildly.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub Actions presently prohibits creation of Docker networks, which is a foundation-level requirement for Docker Compose. See &lt;a href=&quot;https://github.com/actions/docker/issues/11#issuecomment-514608079&quot;&gt;this GitHub issue comment&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Ansible has been used in earlier test-application deployments, but API changes appear to have broken the tool which it uses to deploy to our preferred hosting provider, Digital Ocean. That has been left as a fix “for the community to implement”. To Ansible’s credit, they’ve recognised the potential value of &lt;a href=&quot;https://www.ansible.com/blog/thoughts-on-restructuring-the-ansible-project&quot;&gt;restructuring the Ansible project&lt;/a&gt;. That document talks a good game, and indeed makes it sound like they’ve recognised some of their more glaring challenges, but we simply haven’t had the resources to evaluate whether the show-stopper-level problems encountered with Ansible 2.6 remain in the current 2.8 (with its accumulated other API changes). The &lt;a href=&quot;https://docs.ansible.com/ansible/latest/modules/list_of_cloud_modules.html#digital-ocean&quot;&gt;greatly-expanded list&lt;/a&gt; of modules for Ansible 2.8 to support Digital Ocean, and the &lt;em&gt;far&lt;/em&gt; more clearly-documented &lt;a href=&quot;https://docs.ansible.com/ansible/latest/modules/docker_compose_module.html#docker-compose-module&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker_compose&lt;/code&gt; module&lt;/a&gt; are promising, however;&lt;/li&gt;
  &lt;li&gt;Terraform looks &lt;em&gt;amazing&lt;/em&gt;, and the support team have been regularly praised in the &lt;a href=&quot;https://github.com/hashicorp/terraform/issues&quot;&gt;GitHub Issues&lt;/a&gt; for the project. On the other hand, there are 1,466 open issues (and 11,367 closed issues) on that repository, and this writer as yet has not yet even attempted use of the tool. That needs to change;&lt;/li&gt;
  &lt;li&gt;GitLab CI/CD has been shown to work quite well for applications developed &lt;em&gt;from the ground up&lt;/em&gt; to evolve within the limitations and foibles of the tool. Adapting an existing Docker Compose-orchestrated application which requires multiple containers to be active &lt;em&gt;in all use cases&lt;/em&gt; has been successfully tested to the point of &lt;em&gt;bringing up&lt;/em&gt; the container constellation (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt;), but no testing has yet been done of any actual container/app tests or deployment beyond that. The available documentation and YouTube tutorials lead this writer to require &lt;em&gt;comprehensive&lt;/em&gt; testing and configuration exploration before seriously considering it for professional* use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“Professional” in this context alludes to the context described by the &lt;a href=&quot;https://quoteinvestigator.com/2013/08/29/get-it-right/&quot;&gt;debatably-anonymous quote&lt;/a&gt;; loosely,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An amateur practices until he gets it right. A professional practices until she can’t get it wrong.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our context, “can’t get it wrong” largely implies “understands the tools and their use well enough to be able to accurately predict what changes can be made successfully, what changes are certain to fail, and where further experimentation might be valuable”. That is &lt;em&gt;far&lt;/em&gt; beyond “getting it right” &lt;em&gt;once&lt;/em&gt; or &lt;em&gt;in a single configuration&lt;/em&gt;, and seems to this writer to be a &lt;em&gt;minimal&lt;/em&gt; confidence level for code intended for revenue production.&lt;/p&gt;

&lt;h2 id=&quot;what-works-for-you-folks&quot;&gt;What Works for You Folks?&lt;/h2&gt;

&lt;p&gt;If anybody has any experience reports (or, better yet, can point me towards good examples) of how to set up automated CI/CD for a Ruby+Postgres+Redis app using any of these tools, I’d really appreciate the help (and will be quite happy to amend this to gratefully acknowledge such assistance). I last built a CI toolchain about three years ago. The ecosystem has definitely changed, and not in a way that benefits the sole developer/small team.&lt;/p&gt;
</description>
				<pubDate>Tue, 30 Jul 2019 00:00:00 +0800</pubDate>
				<link>/deployment/docker/2019/07/30/the-best-thing-about-github-actions-is.html</link>
				<guid isPermaLink="true">/deployment/docker/2019/07/30/the-best-thing-about-github-actions-is.html</guid>
			</item>
		
			<item>
				<title>An Interactor or a Use Case?</title>
				<description>&lt;p&gt;To give some context, I’m still fairly new to Hanami (very small apps in limited use thus far) but, after &lt;em&gt;years&lt;/em&gt; of evolving my architectural thinking to (initially independently) approximate “Uncle” Bob Martin’s &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Architecture&lt;/a&gt; first in Rails, then Sinatra, followed by &lt;a href=&quot;https://roda.jeremyevans.net/&quot;&gt;Roda&lt;/a&gt;, I’ve been completely sold on &lt;a href=&quot;https://www.hanamirb.org/&quot;&gt;Hanami&lt;/a&gt; for over a year now.&lt;/p&gt;

&lt;p&gt;I’d previously worked with interactors before seeing Hanami’s implementation, most notably and repeatedly Aaron Lasseigne’s (initially OrgSync’s) &lt;a href=&quot;https://github.com/AaronLasseigne/active_interaction&quot;&gt;ActiveInteraction&lt;/a&gt;, but they always felt a bit “weird” in Rails; you’re building and enforcing boundaries in a system expressly designed to obliterate them in the belief that doing so enhances developer happiness and (initial) productivity. It’s much less of an issue with other frameworks, particularly Hanami, which for the most part (as noted above) encourages Clean Architecture.&lt;/p&gt;

&lt;p&gt;It’s easy to get sloppy, though, writing &lt;a href=&quot;https://www.rubydoc.info/gems/hanami-utils/Hanami/Interactor/Interface&quot;&gt;Hanami interactors&lt;/a&gt;. Like most functional(-inspired) tools, the main entrypoint is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt; method, which can be skipped entirely if an optional private &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#valid?&lt;/code&gt; method returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;description-of-the-example&quot;&gt;Description of the Example&lt;/h2&gt;

&lt;p&gt;Let’s look at a (rather simplified) example. For an app I’m working on, I implemented a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web::Controller::Session&lt;/code&gt; module with three &lt;a href=&quot;https://guides.hanamirb.org/actions/overview/&quot;&gt;controller-action classes&lt;/a&gt; to serve endpoints: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Session::New&lt;/code&gt; presents a bog-standard login form (unless there already is a current user) which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Session::Create&lt;/code&gt; uses to authenticate a user (which our app calls a “Member”). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Session::Delete&lt;/code&gt;, obviously enough, is used to sign out the current user. Using the &lt;a href=&quot;https://github.com/jdickey/crypt_ident&quot;&gt;CryptIdent&lt;/a&gt; authentication library (which, as its author, I have a rather biased opinion of), I wrote code for these actions.&lt;/p&gt;

&lt;p&gt;Here, we’ll look at the evolution of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Session::Create&lt;/code&gt; controller action and the domain logic it exercises, to illustrate how one might use interactors for such a task, and why one might reach for an alternative instead.&lt;/p&gt;

&lt;h2 id=&quot;baseline-zero-all-logic-in-controller-action&quot;&gt;Baseline Zero: All Logic in Controller Action&lt;/h2&gt;

&lt;p&gt;Here’s the code for the first whack of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Session::Create&lt;/code&gt; controller action:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Web&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Controllers&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Session&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Create&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RequireGuest&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# prevents execution if a Member has been Signed In&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanami&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Session&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# rubocop:disable Metrics/AbcSize, Metrics/MethodLength, Style/GuardClause, Metrics/LineLength&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UserRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sign_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:|&lt;/span&gt;
                &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Signed in successfully'&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
                &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CryptIdent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guest_user&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Invalid Member Name or Password'&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root_path&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# #call&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# rubocop:enable Metrics/AbcSize, Metrics/MethodLength, Style/GuardClause, Metrics/LineLength&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.rubydoc.info/github/jdickey/crypt_ident/CryptIdent#sign_in-instance_method&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CryptIdent#sign_in&lt;/code&gt;&lt;/a&gt; method is implemented using dry-monads’ &lt;a href=&quot;https://dry-rb.org/gems/dry-monads/1.0/result/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Result&lt;/code&gt; monads&lt;/a&gt; with dry-matcher’s &lt;a href=&quot;https://dry-rb.org/gems/dry-matcher/result-matcher/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Result&lt;/code&gt; matcher&lt;/a&gt;, which blew me away by how that let me structure and think clearly about my code actions. Everything* either resulted in a Success or a Failure which (optionally) conveyed specific data items along with the result, and dealing with those in a uniform way was one less thing to have to think about. The resulting code isn’t as bad as some we’ve all maintained recently, but it’s hardly clean code, as demonstrated by the number of RuboCop cops disabled for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;iteration-one-extracting-an-interactor&quot;&gt;Iteration One: Extracting an Interactor&lt;/h2&gt;

&lt;p&gt;This really clearly lends itself to an interactor, with the non-controller-specific code extracted:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# lib/the_app/interactors/sign_in_member.rb&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hanami/interactor'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignInValidator&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanami&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validations&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filled?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filled?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# class SignInValidator&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignInMember&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanami&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Interactor&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:current_user&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# We extend CryptIdent at runtime, rather than including it at parse time.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This lets Hanami's setup of everything under `lib` complete before we try to&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# access a `UserRepository`. We could include CryptIdent from a CAC, because&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# by the time the delivery mechanism(s) is/are loaded, the app logic (on which&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# they depend) is already finalised. Depending on cross-component domain logic&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# initialisation can get tricky.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;repo: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UserRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CryptIdent&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sign_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:|&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guest_user&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error!&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Invalid Member Name or Password'&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:repo&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SignInValidator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validate_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This felt good to initially get working so quickly, but it has a few rather obvious problems, particularly centering around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#valid?&lt;/code&gt;. That method, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#validate_params&lt;/code&gt;, both know too much about other bits of the code. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#find_member&lt;/code&gt; method introduces an instance variable so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt; won’t have to re-query the persistence layer to find the user (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;member&lt;/code&gt;) to pass into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#sign_in&lt;/code&gt; at line 32. The block nesting within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#valid?&lt;/code&gt; will become unwieldy if additional validity checks are added in future (e.g., a suspended or banned user won’t be deleted from the system, but will be prevented from signing in). Adding more checks will either make for deeper nesting or introduce a maze of explicit, imperative if/then/else “tentative programming” that is &lt;em&gt;so&lt;/em&gt; easy to get wrong. There’s got to be a better way.&lt;/p&gt;

&lt;p&gt;At least the controller code has been cleaned up a bit:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# apps/web/controllers/session/create.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Web&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Controllers&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Session&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Create&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# rubocop:disable Metrics/MethodLength&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SignInMember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success?&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# exposed from Web::CommonAuthn&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Signed in successfully'&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CryptIdent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guest_user&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Invalid Member Name or Password'&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root_path&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# #call&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# class Web::Controllers::Session::Create&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Everything is controller-specific handling of the result from calling the interactor: setting flash messages and session data, redirecting (and, not shown, validating incoming parameters).&lt;/p&gt;

&lt;p&gt;I’m happy enough with the controller code; but why does the interactor feel wrong?&lt;/p&gt;

&lt;h2 id=&quot;interlude-doubt-dissatisfaction-discovery&quot;&gt;Interlude: Doubt, Dissatisfaction, Discovery&lt;/h2&gt;

&lt;p&gt;One of the habits that I’d fallen into with (other) interactors was to encapsulate any bit of reusable domain logic in its own interactor, such as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfirmValidPassword&lt;/code&gt; interactor that was used both when resetting a lost password and setting a new one for a presently-signed-in user. That, in turn, led to a subtle but important change in how I thought of interactors: rather than exclusively as complete encapsulations of domain logic separate from controller actions, they were now that &lt;em&gt;plus&lt;/em&gt; any assorted bits of supporting logic. My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/the_app/interactors&lt;/code&gt; folder was on track to becoming the kind of universal junk drawer that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib&lt;/code&gt; so typically is in a Rails project. That wasn’t what I wanted; I couldn’t point someone at my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interactors&lt;/code&gt; folder and have them be able to tell at a glance what were implementations of logic to serve a specific controller action, versus what were general-purpose supporting components.&lt;/p&gt;

&lt;p&gt;What I wanted was something more akin to Jacobson &lt;a href=&quot;https://www.ivarjacobson.com/sites/default/files/field_iji_file/article/use-case_2_0_jan11.pdf&quot;&gt;use cases&lt;/a&gt;. Those “tell a story” revolving around a sequence of steps taken in response to a &lt;em&gt;trigger&lt;/em&gt; event by an &lt;em&gt;actor&lt;/em&gt; who initiates the action. They should obviously reuse truly common code, but it should be immediately obvious both in terms of the project layout and in terms of the use case content itself what are shared components and what are not.&lt;/p&gt;

&lt;p&gt;I had been on the &lt;a href=&quot;https://gitter.im/hanami/chat&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hanami/chat&lt;/code&gt;&lt;/a&gt; channel in Gitter for some time. A few days ago, I asked&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Has anyone tried using dry-rb Result matchers (or, perhaps better, dry-transaction’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; sequencing) in/with Hanami interactors? How did that go? I’m thinking of this as I look at one of my own “higher-order” interactors that uses two others, calling first one and then, if that was successful, passing its result in as input to the second. What I wind up with is awfully procedural, and I’d like to clean it up a bit. I’ve used Result matchers before, and I know that Hanami and dry-rb are supposed to be more thoroughly integrated going forward, but it seems like interactors, in their current incarnation, are somewhat orthogonal to the dry-rb way of structuring things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tiev&quot;&gt;Viet (Drake) Tran&lt;/a&gt; stepped up and pointed out that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Interactor and dry-rb result are two implementations of the same concept. So I think you should follow only one of them. And to use dry-rb result with more elegant syntax, do-notation is the best &lt;a href=&quot;https://dry-rb.org/gems/dry-monads/1.0/do-notation/&quot;&gt;https://dry-rb.org/gems/dry-monads/1.0/do-notation/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He was right. Let me show you what I mean.&lt;/p&gt;

&lt;h2 id=&quot;iteration-two-a-different-use-case-approach-and-enlightenment&quot;&gt;Iteration Two: A Different Use-Case Approach, and Enlightenment&lt;/h2&gt;

&lt;p&gt;I reworked the guts of the previous interactor into this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# lib/the_app/use_cases/sign_in_member.rb&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dry/monads/result'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dry/monads/do'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;UseCases&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Use case implementation for signing in a Member. Makes use of the CryptIdent&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# authentication library, and is implemented using dry-monads' 'do notation`.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# See https://dry-rb.org/gems/dry-monads/1.0/do-notation/ for a discussion.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignInMember&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Monads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Mixin&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Monads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;repo: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UserRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CryptIdent&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticate_member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:repo&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate_member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sign_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:|&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:|&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sign_in: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;member: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Name or password not valid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SignInValidator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure?&lt;/span&gt;

      &lt;span class=&quot;no&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignInValidator&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanami&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validations&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;validations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filled?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filled?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# class UseCases::SignInMember::SignInValidator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# class UseCases::SignInMember&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how each step (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#validate&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#find_member&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#authenticate_member&lt;/code&gt;) is self-contained; the only bit of state introduced in the entire class is a Repository assigned to in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#initialize&lt;/code&gt; and read from in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#find_member&lt;/code&gt;; this allows a test double to be injected rather than using the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserRepository.new&lt;/code&gt; instance. Each of the three “step” methods, as well as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt;, make success or failure unavoidably obvious, and the beauty of “do notation” is that a Failure reported by any method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield&lt;/code&gt;ed to from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt; causes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt; to return that Failure in lieu of executing any further steps.&lt;/p&gt;

&lt;p&gt;So what does this do to the interactor and the controller action? The code that would remain in an interactor becomes so trivial that it can safely be moved into the controller action directly:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# apps/web/controllers/session/new.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Web&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Controllers&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Session&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Create&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RequireGuest&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanami&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Session&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SignInMember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CryptIdent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guest_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@current_user&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;flash_message_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root_path&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# #call&lt;/span&gt;

        &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flash_message_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success?&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Signed in successfully'&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Invalid Member Name or Password'&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are only two bits of code here that know or even care if the result was successful or not. One, obviously, is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#flash_message_for&lt;/code&gt;; the other is at line 21, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@current_user&lt;/code&gt; is assigned the value from the successful result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SignInMember&lt;/code&gt; or, on failure, the “guest user”. That line is also the &lt;em&gt;only&lt;/em&gt; line of code in the class that has any knowledge whatsoever of what a regular Member or a “guest user” &lt;em&gt;are&lt;/em&gt;. Compare that to the last controller code you worked on. 😀&lt;/p&gt;

&lt;p&gt;Thoughts? Anything I could have done better? Disagree with my approach? Let’s have a chat about it; leave me a comment here or find me on Gitter in &lt;a href=&quot;https://gitter.im/hanami/chat&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hanami/chat&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

</description>
				<pubDate>Sat, 13 Apr 2019 00:00:00 +0800</pubDate>
				<link>/development/2019/04/13/an-interactor-or-a-use-case.html</link>
				<guid isPermaLink="true">/development/2019/04/13/an-interactor-or-a-use-case.html</guid>
			</item>
		
			<item>
				<title>What Gems Do I Start With?</title>
				<description>&lt;p&gt;Well, hello again! Excuse the dust…&lt;/p&gt;

&lt;p&gt;This post is in response to a &lt;a href=&quot;https://www.reddit.com/r/rails/comments/9isbvh/should_i_use_trailblazer/&quot;&gt;question on Reddit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r/rails&lt;/code&gt;&lt;/a&gt;, and specifically a &lt;a href=&quot;https://www.reddit.com/r/rails/comments/9isbvh/should_i_use_trailblazer/e6nmfbz/&quot;&gt;follow-up question&lt;/a&gt; from my response to his initial question. He later asked me to “list the gems [I] use on every project that [make] the code more readable and will let the developer keep his sanity”.&lt;/p&gt;

&lt;p&gt;I started out by thinking that I’d just give him a copy of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; I’m using for a project in its very early stages, where the vast majority of the 30+ Gems listed as direct dependencies are from boilerplate I carry around to every project, with all but one of the rest being the kind of boilerplate he was asking for. Then I thought that hey, &lt;a href=&quot;https://rubygems.org&quot;&gt;RubyGems.org&lt;/a&gt; is a great resource for identifying what individual Gems are and what they depend on, but dumping a list of more than 25 Gems on someone without at least briefly explaining what each is and why it’s in my boilerplate probably wouldn’t be a very effective way to convey useful information. As what I started typing grew longer than I’d want to see in a Reddit post response, I decided I’d better write it as a blog post. So here we are.&lt;/p&gt;

&lt;p&gt;To recap, what I enumerate below are Gems I use on practically every Ruby project I’ve started in the last couple of years, whether that project used Rails, &lt;a href=&quot;https://hanamirb.org/&quot;&gt;Hanami&lt;/a&gt;, or &lt;a href=&quot;https://roda.jeremyevans.net/&quot;&gt;Roda&lt;/a&gt;. They’ve each been useful for me and my team, and I expect to be using them individually and collectively until and unless I find something that does the job more to my liking. (Yes, this is largely a subjective list; others may not think you need all this, but give them a try before you dismiss them.)&lt;/p&gt;

&lt;p&gt;This turned into a lot more than you asked for; more than I expected to write; and &lt;em&gt;far&lt;/em&gt; more than anyone would bother reading in a Reddit comment. Comments, nonetheless, are welcome. Thanks for reading.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;h3 id=&quot;testing-features&quot;&gt;Testing Features&lt;/h3&gt;

&lt;p&gt;It’s &lt;em&gt;essential&lt;/em&gt; to have feature specs, which automate “doing things the way a user would do them and verifying the resulting actions/side effects”, especially in a BDD shop. (Doing inside-out TDD instead? How do you prove you’ve finished something correctly if you don’t have feature specs?) It’s important to remember that it’s normal, if a bit disheartening, to have your feature specs fail &lt;em&gt;every single time&lt;/em&gt; as you’re in the trenches of building out a new feature; the thing that tells you you’re making progress is that your feature spec makes it &lt;em&gt;farther&lt;/em&gt; without falling over.&lt;/p&gt;

&lt;p&gt;The de facto feature-spec package for Ruby for &lt;em&gt;many&lt;/em&gt; years now has been &lt;a href=&quot;https://github.com/teamcapybara/capybara&quot;&gt;Capybara&lt;/a&gt;. To use it with modern applications (i.e., apps which incorporate JavaScript client-side functionality), you need a &lt;em&gt;driver&lt;/em&gt; more capable than the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rack-test&lt;/code&gt;; that’s where &lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capybara-webkit&lt;/code&gt;&lt;/a&gt; comes in. An alternate, “industrial-strength” driver would be the &lt;a href=&quot;https://github.com/shvets/selenium&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selenium&lt;/code&gt; Gem&lt;/a&gt;, which provides a Ruby wrapper for the &lt;a href=&quot;https://www.seleniumhq.org/projects/webdriver/&quot;&gt;Selenium server&lt;/a&gt;, which is a Java application.&lt;/p&gt;

&lt;p&gt;Docker is your friend.&lt;/p&gt;

&lt;h3 id=&quot;testing-code&quot;&gt;Testing Code&lt;/h3&gt;

&lt;p&gt;For the last 3-4 years, I have preferred to use Minitest, particularly Minitest::Spec rather than RSpec. In my experience, it’s faster, more explicit, and therefore easier to understand what it’s doing and why. I also prefer its philosophy of “add separate (Gem-based) enhancements to a minimal core” to what I see as RSpec’s “override the built-in defaults as you like”. That view seems to be a bit less widely-held of late, particularly in the Rails community.&lt;/p&gt;

&lt;p&gt;The Minitest enhancement Gems I use are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jeremyevans/minitest-hooks&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minitest-hooks&lt;/code&gt;&lt;/a&gt;, which adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;before(:all)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after(:all)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;around&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;around(:all)&lt;/code&gt; to Minitest. In any non-toy project, you &lt;em&gt;will&lt;/em&gt; find these handy.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wojtekmach/minitest-matchers&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minitest-matchers&lt;/code&gt;&lt;/a&gt; adds support for &lt;a href=&quot;https://github.com/thoughtbot/shoulda-matchers&quot;&gt;Shoulda&lt;/a&gt;/RSpec-style matchers to Minitest::Unit and Minitest::Spec. This style of matcher has been described as “crack cocaine for RSpec, analogous to ActiveSupport for Rails”. This gives you the literate-test-style “high” without the same level of attendant side-effects.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kern/minitest-reporters&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minitest-reporters&lt;/code&gt;&lt;/a&gt; lets you create &lt;a href=&quot;https://github.com/search?q=%22Minitest%3A%3AReporters%3A%3A%22&quot;&gt;custom Minitest output formats&lt;/a&gt;, or use one or more of the eight that are packaged with the Gem. (Yes, you can run multiple reporters at once. Want a red/green-displaying report &lt;em&gt;and&lt;/em&gt; a report that integrates with RubyMine? Got you covered.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jbodah/minitest-tagz&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minitest-tagz&lt;/code&gt;&lt;/a&gt; gives you a nice “tagging” capability, perhaps most commonly used to tag examples and groups as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:focus&lt;/code&gt;. With a properly-set-up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec_helper.rb&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_helper.rb&lt;/code&gt;, this will allow you to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby spec/path/to/your_spec.rb&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake spec&lt;/code&gt; (or their Minitest::Unit equivalents) and have &lt;em&gt;just&lt;/em&gt; the tagged examples run. Indispensable. &lt;em&gt;Be advised that&lt;/em&gt; this Gem has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; at the end; there &lt;em&gt;is&lt;/em&gt; a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minitest-tags&lt;/code&gt; Gem (with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;) that hasn’t been updated since Version 0.0.5 in April, 2012. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minitest-tagz&lt;/code&gt;, on the other hand, is actively maintained; Version 1.6.0 was released on 9 May.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;other-useful-gems&quot;&gt;Other Useful Gems&lt;/h3&gt;

&lt;p&gt;Does your app use a database? Then you almost certainly should be using &lt;a href=&quot;https://github.com/DatabaseCleaner/database_cleaner&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database_cleaner&lt;/code&gt;&lt;/a&gt;, which does just what it says on the tin: helps you ensure that your integration tests (and any test that touches the database while doing something else &lt;em&gt;is&lt;/em&gt; an integration test, remember) clean up after themselves.&lt;/p&gt;

&lt;p&gt;Feeling like if you see another &lt;em&gt;John Doe&lt;/em&gt; username in tests, you’ll break something expensive? You need &lt;a href=&quot;https://github.com/ffaker/ffaker&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffaker&lt;/code&gt;&lt;/a&gt;, ffriend; this will generate whatever &lt;a href=&quot;https://github.com/ffaker/ffaker/tree/master/lib/ffaker&quot;&gt;type of data value&lt;/a&gt; you need. Korean &lt;em&gt;Lorem Ipsum&lt;/em&gt;? People’s names, using either default Western conventions or any of a couple of dozen localisations? Got you covered.&lt;/p&gt;

&lt;p&gt;That comes in handy when you get tired of developing and maintaining fixtures and seed data to populate your models during tests. Use [&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fabrication](https://www.fabricationgem.org/) (or its better-marketed if less feature-rich analogue, [&lt;/code&gt;factory_bot&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;](https://github.com/thoughtbot/factory_bot)) will help. Define the attributes of a model, and you can create an instance based on your template (with or without saving the instance to your database), or simply get a &lt;/code&gt;Hash&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; with the attribute values.  For example, here's a simple &lt;/code&gt;fabrication` User Fabricator from one of my projects:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'securerandom'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'timerizer'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Fabricator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FFaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html_safe_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FFaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Internet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;safe_email&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FFaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTMLIpsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fancy: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hashed_pass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seconds_per_month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 30..60 days before now&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rand_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds_per_month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds_per_month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;updated_at&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# at least one hour after user creation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See how that works? You can even define field values relative to other field values, as with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updated_at&lt;/code&gt; value being dependent on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;created_at&lt;/code&gt;, or a “safe” email address being generated based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; value. Instantiation can be as simple as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author = Fabricate(:user)&lt;/code&gt;. Need thirty User entities all with the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;created_at&lt;/code&gt; timestamp but don’t want them to hit the database right away? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;students = Fabricate.build(:user, created_at: 3.days.ago)&lt;/code&gt; does just what you think it will. Support exists for &lt;a href=&quot;https://www.fabricationgem.org/#rails&quot;&gt;Rails&lt;/a&gt;, &lt;a href=&quot;https://github.com/jodosha/hanami-fabrication&quot;&gt;Hanami&lt;/a&gt;, and a &lt;a href=&quot;https://www.fabricationgem.org/#configuration&quot;&gt;documented procedure&lt;/a&gt; to support any other ORM you may be using.&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;I &lt;em&gt;can’t stand&lt;/em&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irb&lt;/code&gt; console; I much prefer &lt;a href=&quot;https://pryrepl.org/&quot;&gt;Pry&lt;/a&gt;, in the &lt;a href=&quot;https://github.com/deivid-rodriguez/pry-byebug&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry-byebug&lt;/code&gt;&lt;/a&gt; enhancement. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry-byebug&lt;/code&gt; is only one of the numerous &lt;a href=&quot;https://github.com/pry/pry/wiki/Available-plugins&quot;&gt;plugins&lt;/a&gt; available for Pry; the only other one I use consistently is &lt;a href=&quot;https://github.com/pry/pry-doc&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry-doc&lt;/code&gt;&lt;/a&gt;, which adds MRI Core documentation and source code to the Pry REPL. There are few learning aids or reminders more effective than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show-source&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show-doc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes you just want good old-fashioned “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf(3)&lt;/code&gt; debugging”, so you can see where things are Going Horribly Wrong in your code/data without actually forcing a debugger breakpoint. For those situations, &lt;a href=&quot;https://github.com/awesome-print/awesome_print&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awesome_print&lt;/code&gt;&lt;/a&gt; was my go-to tool for &lt;em&gt;years&lt;/em&gt; before I realised that a proper logger like &lt;a href=&quot;https://www.rubydoc.info/gems/hanami-utils/Hanami/Logger&quot;&gt;Hanami::Logger&lt;/a&gt; or &lt;a href=&quot;https://rocketjob.github.io/semantic_logger/&quot;&gt;Semantic Logger&lt;/a&gt; is &lt;em&gt;far&lt;/em&gt; more flexible and useful.&lt;/p&gt;

&lt;h2 id=&quot;static-analysis&quot;&gt;Static Analysis&lt;/h2&gt;

&lt;p&gt;These are tools I generally use via Rake tasks, or which integrate into tools typically run from Rake, like Minitest. This is &lt;em&gt;probably&lt;/em&gt; the most direct answer to the question of what Gems make “the code more readable and will let the developer keep his sanity”, but do read on.&lt;/p&gt;

&lt;p&gt;Writing code without static-analysis tools, to me, is very much like driving on the expressway on a dark and foggy night without headlights: if I’m very careful, and &lt;em&gt;very&lt;/em&gt; lucky, I can &lt;em&gt;probably&lt;/em&gt; get where I’m going without hitting anything of consequence, but all it takes is one unseen obstacle (say, a few bags of cement accidentally dropped from a truck) to ruin my whole night. With a good pair of fog headlights, I’m much more confident of where I’m going.&lt;/p&gt;

&lt;p&gt;The tools I use on &lt;em&gt;every&lt;/em&gt; project are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/seattlerb/flog&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flog&lt;/code&gt;&lt;/a&gt; is a complexity metric. As your project grows, its Flog report will show you the classes and methods which are the most complex, with a view towards prodding you to refactor any excessively-highly-Flogged method. Our shop rules define a method score above 7.5 as a &lt;a href=&quot;https://blog.codinghorror.com/code-smells/&quot;&gt;&lt;em&gt;code smell&lt;/em&gt;&lt;/a&gt;; not even presumed to be buggy, but more likely to warrant further attention. A score above 12.0 (soon to become 10.0) will block a feature branch from being merged back into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt;. You’ll want to adopt rules that make sense for your shop, and adjust them as you gain experience and as individual projects mature.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/troessner/reek&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reek&lt;/code&gt;&lt;/a&gt; is a general, wide-ranging code-smell detector. With some four dozen or so &lt;a href=&quot;https://github.com/troessner/reek#code-smells&quot;&gt;smells&lt;/a&gt; defined, and with an easy-to-use, flexible &lt;a href=&quot;https://github.com/troessner/reek#configuration&quot;&gt;configuration&lt;/a&gt; scheme, you can use Reek in its default configuration or make it as permissive or strict as your shop standards allow.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rubocop-hq/rubocop/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubocop&lt;/code&gt;&lt;/a&gt; is a static code analyser and (perhaps primarily) format enforcer, supporting the guidelines from the community &lt;a href=&quot;https://github.com/rubocop-hq/ruby-style-guide&quot;&gt;Ruby Style Guide&lt;/a&gt; (which is a great resource for new/newish Ruby devs).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/colszowka/simplecov&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simplecov&lt;/code&gt;&lt;/a&gt; is a simple (&lt;a href=&quot;https://grosser.it/2008/04/04/whats-my-coverage-c0-c1-c2-c3-path-coverage/&quot;&gt;C0 coverage&lt;/a&gt; only) test-coverage checker for Ruby. If tests never exercise your code, especially in a proper BDD or TDD process, then the untested code is &lt;em&gt;anomalous&lt;/em&gt;; possibly a bug, but definitely worthy of examining why it’s there. You may not always (especially in a legacy project) always have 100% coverage as reported by your tool, but you &lt;em&gt;should&lt;/em&gt; have a shop standard for deciding whether your test coverage (at a method, class/module, and project level) is adequate for your purposes.&lt;/li&gt;
  &lt;li&gt;Finally, &lt;a href=&quot;https://github.com/seattlerb/flay&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flay&lt;/code&gt;&lt;/a&gt; analyses code for structural similarities. DRY is a Good Thing (once you’ve established you’re not using &lt;a href=&quot;https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&quot;&gt;the wrong abstraction&lt;/a&gt;), and Flay points out code that “too-shamelessly” duplicates other code in your project. &lt;em&gt;Any&lt;/em&gt; non-zero score here is treated as cause for immediate concern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My current project’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; has a default task which looks like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spec default: [:spec, :flog, :flay, :reek, :rubocop]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;but-wait-theres-more&quot;&gt;But Wait; There’s More!&lt;/h2&gt;

&lt;p&gt;Do you miss the nice date/time arithmetic from ActiveSupport in your non-Rails project? Look no further than &lt;a href=&quot;https://github.com/kylewlacy/timerizer&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timerizer&lt;/code&gt;&lt;/a&gt; which delivers on the promise to be a “simple Ruby time helper, just like the Rails ones. You know, without the Rails.”&lt;/p&gt;

&lt;p&gt;Are your config files unwieldy to deal with, especially with sensitive data; or do you need to be able to support different environment variable values in different environments (development, test, etc), perhaps because you’re developing a proper &lt;a href=&quot;https://12factor.net/&quot;&gt;12 Factor&lt;/a&gt; app? You’ll find &lt;a href=&quot;https://github.com/thekompanee/chamber&quot;&gt;Chamber&lt;/a&gt; &lt;em&gt;very&lt;/em&gt; useful. Protip: install the Git pre-commit hook that won’t let you commit unencrypted secret data. Your auditors can thank me later.&lt;/p&gt;

&lt;p&gt;Do you work with or for people who don’t have simple email addresses that can be validated by any of the simple regular-expression matchers out there, &lt;a href=&quot;https://www.natashatherobot.com/ruby-email-validation-regex/&quot;&gt;buggy&lt;/a&gt; or not? Then you’ll find &lt;a href=&quot;https://github.com/afair/email_address&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email_address&lt;/code&gt;&lt;/a&gt; probably handles anything you can throw at it, especially when you enable it looking for appropriate DNS &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; records to match the domain against.&lt;/p&gt;

&lt;p&gt;Finally, if you’re not already familiar with it, you should have &lt;a href=&quot;https://awesome-ruby.com/&quot;&gt;Awesome Ruby&lt;/a&gt; near the top of your bookmarks list. A categorised, community-driven, curated list of Gems for most things you’d want to pull off the shelf, and a few that you might not have thought that you could. Part of the awesome &lt;a href=&quot;https://github.com/sindresorhus/awesome&quot;&gt;Awesome&lt;/a&gt; list of awesome lists, which includes lists on what have to be &lt;em&gt;hundreds&lt;/em&gt; of different topics, from your favourite programming technology to &lt;a href=&quot;https://github.com/sindresorhus/awesome-scifi#readme&quot;&gt;science fiction&lt;/a&gt; to &lt;a href=&quot;https://github.com/mmccaff/PlacesToPostYourStartup#readme&quot;&gt;places to post your startup&lt;/a&gt;. (If startups aren’t science fiction, what are they? Well, most of them turn out to be fantasy instead, yes?)&lt;/p&gt;
</description>
				<pubDate>Fri, 28 Sep 2018 00:00:00 +0800</pubDate>
				<link>/development/practices/2018/09/28/what-gems-do-i-start-with.html</link>
				<guid isPermaLink="true">/development/practices/2018/09/28/what-gems-do-i-start-with.html</guid>
			</item>
		
			<item>
				<title>Enthusiastically Poking at Hanami</title>
				<description>&lt;p&gt;This is indirectly a long-delayed follow-up to &lt;a href=&quot;https://jdickey.github.io/not%20yet%20categorised/2014/06/24/lotus-a-complete-web-framework-for-ruby.html&quot;&gt;this post&lt;/a&gt; from &lt;em&gt;June, 2014&lt;/em&gt;. It took &lt;em&gt;amazing&lt;/em&gt; a while to get here, but it &lt;em&gt;did.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you’re an experienced OO developer, who also does Web development in Ruby and is in a use relationship with Rails, at some point you’ve beaten your head against the wall (often literally) in enraged frustration at how much effort it takes to make seemingly simple changes, and how few aids the framework really has for good architecture and design. Many megabytes have been published by more capable and patient bloggers than I regarding the walls one must power through in order to get work done with Rails. Nick Sutterer put it almost perfectly in his &lt;a href=&quot;https://leanpub.com/trailblazer&quot;&gt;&lt;em&gt;Trailblazer&lt;/em&gt;&lt;/a&gt; book:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For every Rails project, there is exactly two outcomes. Either someone in the team’s an experienced architect and leads the software to an advanced design with service layer, view components, maybe forms, and so on. Or, and that’s the classic way, the project strictly follows the Rails Way and will end up as a code disaster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or, to put it another way, your team will spend an allegorical &lt;em&gt;forty years in the wilderness&lt;/em&gt; turning a Rails-Way megalith with no underlying structure into a compelling product that real people will pay you real money for, enabling you to hire enough developers to fix enough bugs that you can add a feature or two every quarter and not run yourselves into the ground (or out of money, or both). Someone wins the lottery almost every week, too.&lt;/p&gt;

&lt;p&gt;For the last three years, I’ve been keeping a hopeful eye on &lt;a href=&quot;http://hanamirb.org/&quot;&gt;&lt;em&gt;Hanami&lt;/em&gt;&lt;/a&gt;, née &lt;em&gt;Lotus&lt;/em&gt;, which appeared to tick all my oh-how-I-wish boxes for a Ruby Web framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;clean, understandable architecture;&lt;/li&gt;
  &lt;li&gt;fluent in and encouraging of good design principles; at a minimum including &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt;);&lt;/li&gt;
  &lt;li&gt;an active, open, welcoming development group; and hope of hopes&lt;/li&gt;
  &lt;li&gt;documentation good enough that a new developer doesn’t have to spend weeks parsing source files to understand basic concepts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hanami ticks each of those boxes with enthusiastic authority. The team discussion on &lt;a href=&quot;https://gitter.im/hanami/chat&quot;&gt;Gitter&lt;/a&gt; is informative, popular, and welcoming of new developers. The &lt;a href=&quot;http://hanamirb.org/guides/1.1/&quot;&gt;documentation&lt;/a&gt; is amazing. And the architecture…do I really have to rave for fifty paragraphs about how much I like the architecture? (I probably could.)&lt;/p&gt;

&lt;p&gt;Give it a try. Work through the introductory project, hang out in the Gitter room, and learn a few (dozen) things that will make your work much more enjoyably productive than it may well have been.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;yes-but&quot;&gt;Yes, but…&lt;/h1&gt;

&lt;p&gt;The above is an introduction to what follows. The rest of this post documents notes I took as I took the end product of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bookshelf&lt;/code&gt; tutorial and added the analysis tools I use on most Ruby projects to the default task in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt;. This required some adaptation, as documented below.&lt;/p&gt;

&lt;p&gt;The project itself can be found as a Git repository &lt;a href=&quot;&quot;&gt;on GitHub&lt;/a&gt; https://github.com/jdickey/bookshelf). Git setup and commits &lt;em&gt;were not&lt;/em&gt; specified by the tutorial itself. That, too, in my opinion, is a bug in the tutorial.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;over-analysing-the-hanami-tutorial&quot;&gt;(Over?) Analysing the Hanami Tutorial&lt;/h1&gt;

&lt;p&gt;What happens when we apply popular Ruby static-analysis tools to the final product of the &lt;a href=&quot;http://hanamirb.org/guides/1.1/&quot;&gt;Hanami 1.1 tutorial&lt;/a&gt;? How “clean” do the tools say our Clean Architecture code is?&lt;/p&gt;

&lt;p&gt;Remember that the app at this point is a &lt;em&gt;tiny&lt;/em&gt; MVC app; one controller has a single action (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Home::Index&lt;/code&gt;), and the other (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Books&lt;/code&gt;) has a total of three (for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;). There are a total of 424 lines of code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rb&lt;/code&gt; files, many of which (e.g., the 326-line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps/web/application.rb&lt;/code&gt;) are auto-generated. We’re not going to draw any broad conclusions about the quality of Hanami code here; we’re just looking for the initial reactions that a developer familiar with the tools but new to Hanami might have.&lt;/p&gt;

&lt;p&gt;We’ll look at several popular Gem-based tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/seattlerb/flog&quot;&gt;Flog&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/seattlerb/flay&quot;&gt;Flay&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/troessner/reek&quot;&gt;Reek&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;RuboCop&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lessons-and-conclusions&quot;&gt;Lessons and Conclusions&lt;/h1&gt;

&lt;p&gt;Aka the &lt;strong&gt;tl; dr&lt;/strong&gt; for people who aren’t already certain they want to go through the voluminous content for each of the tools mentioned, but have learned enough about &lt;a href=&quot;http://hanamirb.org/&quot;&gt;Hanami&lt;/a&gt; to at least be open to learning the framework. (You won’t regret it!)&lt;/p&gt;

&lt;p&gt;The generated (and lightly updated) code which exists at the end of the &lt;a href=&quot;http://hanamirb.org/guides/1.1/&quot;&gt;Hanami 1.1 tutorial&lt;/a&gt; tutorial makes sense; is in line with Clean Architecture as espoused by authorities such as Robert C Martin and Arkency, and lends itself to Domain-Driven Design principles. It has several near-duplicate source files (e.g., the view code); during a “real” project, these can be expected to evolve independently, making initial “maximum DRY” code an opportunity for bugs rather than a feature.&lt;/p&gt;

&lt;p&gt;The Hanami documentation, both the tutorial itself and the remainder of the documentation, is superb; the only Ruby code that this writer has yet seen with similar depth, breadth, and accessibility to the Hanami 1.1 documentation has been the Rails Guides, and those can often be overwhelming, even to experienced developers merely trying to brush up on a topic.&lt;/p&gt;

&lt;p&gt;With regard to the tooling added in the current exercise, we see a few mild to moderate pain points that developers experienced with these tools in other frameworks should be aware of.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Most significantly, the as-generated code and specs use Ruby’s “compact” module specifications (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module Foo::Bar::Baz&lt;/code&gt;) rather than the preferred explicit nesting (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module Foo; module Bar; module Baz&lt;/code&gt;, preferably on subsequent, iteratively indented lines). The community Ruby Style Guide has &lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide#namespace-definition&quot;&gt;a good explanation&lt;/a&gt; of the rationale, which links to a &lt;a href=&quot;https://cirw.in/blog/constant-lookup.html&quot;&gt;good discussion of constant lookup in Ruby&lt;/a&gt; which provides further explanation and justification for the preference. This writer would have preferred that Hanami encourage this usage, e.g., by using it for generated code and specs.&lt;/li&gt;
  &lt;li&gt;The tools provide a baseline of metrics which have been shown generally useful as projects progress from the bare-minimum state exemplified by the current code, and bringing code into compliance with guidelines (such as the Style Guide) and thinking through even “obviously trivial” violations of &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt; principles &lt;em&gt;early&lt;/em&gt; prevents confusion and more work later;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that in mind, a project proceeding from a generated Hanami project &lt;strong&gt;should&lt;/strong&gt; utilise these tools as part of its standard pipeline (e.g., default Rake task and/or CI process). It &lt;strong&gt;must&lt;/strong&gt; also open issues in its issue tracker immediately after these tools are integrated, which note the configuration overrides needed to prevent Reek and/or RuboCop from reporting violations. The practices which necessitated those overrides for generated code &lt;strong&gt;should&lt;/strong&gt; be remediated with a moderate to high degree of urgency, and new or modified code &lt;strong&gt;must&lt;/strong&gt; report no violations when those tools are used in their default configurations to examine the new or modified files.&lt;/p&gt;

&lt;p&gt;This writer must, however, re-emphasise his elation with his initial exposure to Hanami. The architecture includes many major features which his projects have been seeking to attain for several years, with frameworks/toolkits like Rails and even Roda making that discouragingly non-intuitive and clearly non-native to the underlying philosophy. Many &lt;a href=&quot;https://www.poodr.com/&quot;&gt;excellent&lt;/a&gt; &lt;a href=&quot;https://leanpub.com/growing-rails&quot;&gt;books&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&quot;&gt;presentations&lt;/a&gt;, and &lt;a href=&quot;http://trailblazer.to/&quot;&gt;additional framework layers&lt;/a&gt; have been developed over the years to make Rails (in particular) more emenable to production-scale development and maintenance; finding a framework that (largely) takes those lessons to heart &lt;em&gt;out of the box&lt;/em&gt; is, to put it mildly, a refreshingly vindicating experience.&lt;/p&gt;

&lt;h1 id=&quot;the-tools&quot;&gt;The Tools&lt;/h1&gt;

&lt;h2 id=&quot;flog&quot;&gt;Flog&lt;/h2&gt;

&lt;p&gt;First up, &lt;a href=&quot;https://github.com/seattlerb/flog&quot;&gt;Flog&lt;/a&gt; says it&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…reports the most tortured code in an easy to read pain report. The higher the score, the more pain the code is in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ve used this tool on numerous projects over the last several years. It’s easy to use, has a Rake task that does &lt;em&gt;almost&lt;/em&gt; exactly what we want (and is easily customised), so what’s not to like?&lt;/p&gt;

&lt;p&gt;We add the line&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'flog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'4.6.1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and rebundle. Then, we add to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'flog'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'flog_task'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlogTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TaskLib&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:methods_only&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;FlogTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# default is 200&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;methods_only&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(apps lib)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we run the tool as a Rake task:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rake flog
    22.8: flog total
     4.6: flog/method average

     9.8: Web::Controllers::Books::Create#call apps/web/controllers/books/create.rb:15-21
     6.2: Web::Application::configure#production apps/web/application.rb:295-323
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On previous projects (using Rails or Roda as frameworks), we’d adopted the guidelines that any per-method score over 6.0 was a code smell, and over 8.0 was probably in need of refactoring. (Adjust those scores upwards by 1.0 for a Rails project.)&lt;/p&gt;

&lt;p&gt;The per-method average of 4.6 is quite low (good), but what are the two methods being called out here about?  Let’s take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web::Controllers::Books::Create&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Web::Controllers::Books&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Create&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BookRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;books_path&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt; method is exactly what you see in controller actions in tutorials for &lt;em&gt;any&lt;/em&gt; Ruby MVC framework: if it’s been fed valid parameters, it creates a new entity and redirects; if it hasn’t, it complains by setting an HTTP status code (and expects the developer to remember/easily look up that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;422&lt;/code&gt; represents an &lt;a href=&quot;https://httpstatuses.com/422&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unprocesseable Entity&lt;/code&gt;&lt;/a&gt;). If you tend to follow the guidance of Ruby leaders like Avdi Grimm (&lt;em&gt;Confident Ruby&lt;/em&gt;), Sandi Metz (&lt;em&gt;POODR&lt;/em&gt;), or Russ Olsen (&lt;em&gt;Eloquent Ruby&lt;/em&gt;), you may be tempted to refactor the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt; class to look something like&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Web::Controllers::Books&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Create&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report_unprocessable_entity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;

      &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BookRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;books_path&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;report_unprocessable_entity&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ve added a &lt;a href=&quot;http://www.rubydoc.info/github/bbatsov/rubocop/Rubocop/Cop/Style/GuardClause&quot;&gt;guard clause&lt;/a&gt; to replace the alternate-block &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if/else&lt;/code&gt;, and of course the specs pass (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/rake test&lt;/code&gt; does not report errors or failures). When you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/rake flog&lt;/code&gt;, however, you’re a bit crestfallen:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rake flog
    23.3: flog total
     3.9: flog/method average

     9.2: Web::Controllers::Books::Create#call apps/web/controllers/books/create.rb:15-19
     6.2: Web::Application::configure#production apps/web/application.rb:295-323
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Your 9.8 score has come down, yes; but only to 9.2. Flog thinks there’s still a lot of complexity in that method. To get a more detailed view of what it’s complaining about, you flog that one file specifically:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/flog -adm apps/web/controllers/books/create.rb
    10.2: flog total
     5.1: flog/method average

     9.2: Web::Controllers::Books::Create#call apps/web/controllers/books/create.rb:15-19
     1.4:   routes
     1.2:   []
     1.2:   books_path
     1.2:   new
     1.1:   report_unprocessable_entity
     1.0:   redirect_to
     1.0:   valid?
     1.0:   assignment
     1.0:   create
     1.0:   branch

     1.0: Web::Controllers::Books::Create#report_unprocessable_entity apps/web/controllers/books/create.rb:24-25
     1.0:   assignment
     0.2:   lit_fixnum

$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s not complaining about &lt;em&gt;any one thing&lt;/em&gt;; it’s saying that you have &lt;em&gt;enough&lt;/em&gt; “things” in that method that there’s likely an &lt;a href=&quot;http://rubyblog.pro/2017/05/solid-single-responsibility-principle-by-example&quot;&gt;SRP&lt;/a&gt; violation in there somewhere. Looking at the code, you say “Hang on; after the guard clause, &lt;em&gt;all we do is&lt;/em&gt; invoke a method on the repository to create and persist a new entity &lt;em&gt;based on&lt;/em&gt; the parameters being fed in, &lt;em&gt;and then&lt;/em&gt; redirect. What’s wrong with that?!”&lt;/p&gt;

&lt;p&gt;As long as you’re dealing with only 2-3 lines of code from a tutorial, not much is “wrong with that”. However, given our tendency to copy-and-paste code from tutorials into production-destined code, which then grows significantly over time, what started out as a single conditional and less than a half-dozen lines of “real code” tends to grow. And mutate. And overwhelm the poor schmuck (likely you after a few months not seeing the code) sent in to make “a quick change”.&lt;/p&gt;

&lt;p&gt;Let’s instead refactor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Web::Controllers::Books&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Create&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:str?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;report_unprocessable_entity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid?&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;create_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_on_success&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BookRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redirect_on_success&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;books_path&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;report_unprocessable_entity&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/rake flog&lt;/code&gt;, we see a significant change:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rake flog
    25.5: flog total
     3.2: flog/method average

     6.2: Web::Application::configure#production apps/web/application.rb:295-323
     5.4: Web::Controllers::Books::Create#call apps/web/controllers/books/create.rb:15-19
     3.6: Web::Controllers::Books::Create#redirect_on_success apps/web/controllers/books/create.rb:28-29
     2.4: Web::Controllers::Books::Index#call apps/web/controllers/books/index.rb:8-9
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt; method is now at a thoroughly respectable 5.4, and two of the three new methods are correctly noted as tiny. (The third is &lt;em&gt;so&lt;/em&gt; tiny that it doesn’t even make the top 60% of all methods in the code being reported on, which is Flog’s default threshold.)&lt;/p&gt;

&lt;p&gt;Now, take another look at the original code for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt; method compared to what we have now, and you’ll see something important. Many writers and presenters reinforce the idea that methods should &lt;em&gt;either&lt;/em&gt; call other methods &lt;em&gt;or&lt;/em&gt; perform tasks, but &lt;em&gt;should not&lt;/em&gt; mix the two in a single method. Following the guideline makes it easier for developers to reason about individual methods and their relationships by providing another level of useful bright-line categorisation. (For those of you saying “just be functional”, this is a step in your direction.) The final code has half again as many lines as the original, and three new methods, but I’ll buy you lunch if you can successfully defend the idea that the original code was more understandable than the final code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That’s&lt;/em&gt; the value of a tool like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flog&lt;/code&gt;, and that’s why it belongs in our default Rake task chain. Our (cleaned-up) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; now looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rake'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hanami/rake_tasks'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rake/testtask'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'flog'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'flog_task'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlogTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TaskLib&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:methods_only&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'spec/**/*_spec.rb'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;libs&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'spec'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;FlogTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# default is 200&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;methods_only&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(apps lib)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:flog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;spec: :test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;hang-on-what-about&quot;&gt;Hang On, What About…&lt;/h3&gt;

&lt;p&gt;Our current Flog report now has as its highest-scored (most complex) method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web::Application::configure#production&lt;/code&gt; at 6.2. This is part of the generated file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps/web/application.rb&lt;/code&gt;, which is an intensely-commented chunk of DSL. &lt;em&gt;Since&lt;/em&gt; it’s an auto-generated file &lt;em&gt;and since&lt;/em&gt; we haven’t touched the section/method in question, it gets a “free ride”; it’s something we’ll keep an eye on to ask why its score goes up (if in fact it later does), but for now, we have bigger fish to shoot.&lt;/p&gt;

&lt;h2 id=&quot;flay&quot;&gt;Flay&lt;/h2&gt;

&lt;p&gt;Flay is usually pretty quiet unless it detects duplicate code or other similarly “tortured” constructs.  To add Flay support, we add the Gem to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile:&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'flay'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2.10.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and rebundle. To add Flay to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt;, we include two more files:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'flay'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'flay_task'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then add the task definition:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;FlayTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(apps lib)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we change our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; task:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:flog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:flay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/rake&lt;/code&gt; at this point then gives us a comforting report:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rake
Run options: --seed 28320

# Running:

..................S

Finished in 0.076855s, 247.2186 runs/s, 494.4371 assertions/s.

19 runs, 38 assertions, 0 failures, 0 errors, 1 skips

You have skipped tests. Run with --verbose for details.
    25.5: flog total
     3.2: flog/method average

     6.2: Web::Application::configure#production apps/web/application.rb:295-323
     5.4: Web::Controllers::Books::Create#call apps/web/controllers/books/create.rb:15-19
     3.6: Web::Controllers::Books::Create#redirect_on_success apps/web/controllers/books/create.rb:28-29
     2.4: Web::Controllers::Books::Index#call apps/web/controllers/books/index.rb:8-9
Total score (lower is better) = 0
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reek&quot;&gt;Reek&lt;/h2&gt;

&lt;p&gt;Reek is easy to set up in its default state, and supports configuring or suppressing specific warnings either through use of a configuration file (for projectwide settings), or by inline comments (to disable specific warnings for individual methods). Reek is &lt;em&gt;comprehensive&lt;/em&gt;; so much so that every project this writer has seen that uses Reek uses one or both of those suppression mechanisms to silence warnings the team choose not to address. (A common occurence, even in projects that acknowledge the value of Reek, is commit messages or comments that contain variations of “Shut &lt;em&gt;up&lt;/em&gt;, Reek”. 😀&lt;/p&gt;

&lt;p&gt;Add the Gem to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'reek'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'4.7.3'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and rebundle. Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require 'rake/reek/task'&lt;/code&gt; to the files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt;d by our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt;, and then the task block&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Reek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'config.reek'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{apps,lib}/**/*.rb'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reek_opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--sort-by smelliness --no-progress  -s'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;followed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;touch config.reek&lt;/code&gt; to create an empty “config” file. Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/rake&lt;/code&gt; to ensure that you haven’t broken anything else.&lt;/p&gt;

&lt;p&gt;Now for the moment of truth:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rake reek
apps/web/controllers/home/index.rb -- 2 warnings:
  apps/web/controllers/home/index.rb:3: IrresponsibleModule: Web::Controllers::Home::Index has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
  apps/web/controllers/home/index.rb:6: UnusedParameters: Web::Controllers::Home::Index#call has unused parameter 'params' [https://github.com/troessner/reek/blob/master/docs/Unused-Parameters.md]
apps/web/controllers/books/new.rb -- 2 warnings:
  apps/web/controllers/books/new.rb:2: IrresponsibleModule: Web::Controllers::Books::New has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
  apps/web/controllers/books/new.rb:5: UnusedParameters: Web::Controllers::Books::New#call has unused parameter 'params' [https://github.com/troessner/reek/blob/master/docs/Unused-Parameters.md]
apps/web/controllers/books/index.rb -- 2 warnings:
  apps/web/controllers/books/index.rb:3: IrresponsibleModule: Web::Controllers::Books::Index has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
  apps/web/controllers/books/index.rb:8: UnusedParameters: Web::Controllers::Books::Index#call has unused parameter 'params' [https://github.com/troessner/reek/blob/master/docs/Unused-Parameters.md]
apps/web/views/home/index.rb -- 1 warning:
  apps/web/views/home/index.rb:3: IrresponsibleModule: Web::Views::Home::Index has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
apps/web/views/books/new.rb -- 1 warning:
  apps/web/views/books/new.rb:2: IrresponsibleModule: Web::Views::Books::New has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
apps/web/views/books/index.rb -- 1 warning:
  apps/web/views/books/index.rb:2: IrresponsibleModule: Web::Views::Books::Index has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
apps/web/views/books/create.rb -- 1 warning:
  apps/web/views/books/create.rb:3: IrresponsibleModule: Web::Views::Books::Create has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
apps/web/views/application_layout.rb -- 1 warning:
  apps/web/views/application_layout.rb:3: IrresponsibleModule: Web::Views::ApplicationLayout has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
apps/web/application.rb -- 1 warning:
  apps/web/application.rb:5: IrresponsibleModule: Web::Application has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
lib/bookshelf/entities/book.rb -- 1 warning:
  lib/bookshelf/entities/book.rb:1: IrresponsibleModule: Book has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
lib/bookshelf.rb -- 1 warning:
  lib/bookshelf.rb:1: IrresponsibleModule: Bookshelf has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
lib/bookshelf/repositories/book_repository.rb -- 1 warning:
  lib/bookshelf/repositories/book_repository.rb:1: IrresponsibleModule: BookRepository has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
apps/web/controllers/books/create.rb -- 1 warning:
  apps/web/controllers/books/create.rb:3: IrresponsibleModule: Web::Controllers::Books::Create has no descriptive comment [https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md]
16 total warnings


!!! Reek has found smells - exiting!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, that was more exciting than we expected. Lots of complaints about “&lt;a href=&quot;https://github.com/troessner/reek/blob/master/docs/Irresponsible-Module.md&quot;&gt;&lt;em&gt;Irresponsible Module&lt;/em&gt;”&lt;/a&gt; which, on visiting the link, we see is a complaint that there is no explanatory comment at the beginning of a class or module. Fine; we should add those to new classes/modules we create, but our existing code is &lt;em&gt;tiny&lt;/em&gt;; let’s shut that off.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.reek&lt;/code&gt; file, with the contents&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;no&quot;&gt;IrresponsibleModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;enabled: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and try again.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rake reek
apps/web/controllers/home/index.rb -- 1 warning:
  apps/web/controllers/home/index.rb:6: UnusedParameters: Web::Controllers::Home::Index#call has unused parameter 'params' [https://github.com/troessner/reek/blob/master/docs/Unused-Parameters.md]
apps/web/controllers/books/new.rb -- 1 warning:
  apps/web/controllers/books/new.rb:5: UnusedParameters: Web::Controllers::Books::New#call has unused parameter 'params' [https://github.com/troessner/reek/blob/master/docs/Unused-Parameters.md]
apps/web/controllers/books/index.rb -- 1 warning:
  apps/web/controllers/books/index.rb:8: UnusedParameters: Web::Controllers::Books::Index#call has unused parameter 'params' [https://github.com/troessner/reek/blob/master/docs/Unused-Parameters.md]
3 total warnings


!!! Reek has found smells - exiting!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the noise out of the way, we see that all that remains is three occurrences of &lt;a href=&quot;https://github.com/troessner/reek/blob/master/docs/Unused-Parameters.md&quot;&gt;the same&lt;/a&gt; code smell: action classes generated include a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#call&lt;/code&gt; method that by convention takes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;params&lt;/code&gt; parameter which would include any parameters passed to the controller action. Since those three actions &lt;em&gt;don’t&lt;/em&gt; take any parameters, the generated method signature triggers a complaint.&lt;/p&gt;

&lt;p&gt;Let’s fix all three in the traditional Ruby manner of prepending an underscore to the name of a parameter which must be specified, but isn’t actually used. Here’s an example for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web::Controllers::Home::Index&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Web::Controllers::Home&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Index&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After making the changes, running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/rake reek&lt;/code&gt; is uneventful:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rake reek
0 total warnings
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; again so that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; task is defined as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:test, :flog, :flay, :reek]&lt;/code&gt; and move on.&lt;/p&gt;

&lt;h2 id=&quot;rubocop&quot;&gt;RuboCop&lt;/h2&gt;

&lt;p&gt;We’ve put off RuboCop to be the last of these tools added to our Rake setup because it’s by far the most complex and changing over time, requiring either configuration or code changes as it seeks to more fully track the (itself evolving) community &lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide&quot;&gt;&lt;em&gt;Ruby Style Guide&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The current version of RuboCop as this is written is 0.52.0, which may well be out-of-date by the time you read this; adjust your changes accordingly.  First, we add the Gem to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rubocop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.52.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, as usual, we add the Rake task to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RuboCop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RakeTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rubocop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;patterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'apps/**/*.rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'lib/**/*.rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'spec/**/*.rb'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;formatters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'simple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fail_on_error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# task.options &amp;lt;&amp;lt; '--rails'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--config=.rubocop.yml'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--display-cop-names'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;touch .rubocop.yml&lt;/code&gt; to create an empty configuration file, as mentioned in the Rake task.&lt;/p&gt;

&lt;p&gt;And, finally, we can run Rake’s default task (to make sure nothing broke) and then the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rubocop&lt;/code&gt; task:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rake
Run options: --seed 25359

# Running:

.......S...........

Finished in 0.194825s, 97.5234 runs/s, 195.0467 assertions/s.

19 runs, 38 assertions, 0 failures, 0 errors, 1 skips

You have skipped tests. Run with --verbose for details.
    25.5: flog total
     3.2: flog/method average

     6.2: Web::Application::configure#production apps/web/application.rb:295-323
     5.4: Web::Controllers::Books::Create#call apps/web/controllers/books/create.rb:15-19
     3.6: Web::Controllers::Books::Create#redirect_on_success apps/web/controllers/books/create.rb:28-29
     2.4: Web::Controllers::Books::Index#call apps/web/controllers/books/index.rb:8-9
Total score (lower is better) = 0
0 total warnings
$ bin/rake rubocop
Running RuboCop...
== apps/web/application.rb ==
C:  5:  3: Style/Documentation: Missing top-level class documentation comment.
C:  6:  5: Metrics/BlockLength: Block has too many lines. [40/25]
C: 21: 21: Style/WordArray: Use %w or %W for an array of words.
C:236: 40: Style/PercentLiteralDelimiters: %-literals should be delimited by ( and ).
== apps/web/config/routes.rb ==
C:  8: 25: Style/SymbolArray: Use %i or %I for an array of symbols.
== apps/web/controllers/books/create.rb ==
C:  2:  8: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
C:  3:  3: Style/Documentation: Missing top-level class documentation comment.
== apps/web/controllers/books/index.rb ==
C:  2:  8: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
C:  3:  3: Style/Documentation: Missing top-level class documentation comment.
== apps/web/controllers/books/new.rb ==
C:  1:  8: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
C:  2:  3: Style/Documentation: Missing top-level class documentation comment.
C:  5:  5: Style/EmptyMethod: Put empty method definitions on a single line.
== apps/web/controllers/home/index.rb ==
C:  2:  8: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
C:  3:  3: Style/Documentation: Missing top-level class documentation comment.
C:  6:  5: Style/EmptyMethod: Put empty method definitions on a single line.
== apps/web/views/application_layout.rb ==
C:  3:  5: Style/Documentation: Missing top-level class documentation comment.
== apps/web/views/books/create.rb ==
C:  2:  8: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
C:  3:  3: Style/Documentation: Missing top-level class documentation comment.
== apps/web/views/books/index.rb ==
C:  1:  8: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
C:  2:  3: Style/Documentation: Missing top-level class documentation comment.
== apps/web/views/books/new.rb ==
C:  1:  8: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
C:  2:  3: Style/Documentation: Missing top-level class documentation comment.
== apps/web/views/home/index.rb ==
C:  2:  8: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
C:  3:  3: Style/Documentation: Missing top-level class documentation comment.
== lib/bookshelf.rb ==
C:  1:  1: Style/Documentation: Missing top-level module documentation comment.
== spec/features_helper.rb ==
C:  9:  7: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
== spec/web/controllers/books/create_spec.rb ==
C:  4:  1: Metrics/BlockLength: Block has too many lines. [32/25]
C: 13: 81: Metrics/LineLength: Line is too long. [82/80]
== spec/web/views/application_layout_spec.rb ==
C:  1:  9: Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
C:  6: 81: Metrics/LineLength: Line is too long. [90/80]
== spec/web/views/books/create_spec.rb ==
C:  5: 81: Metrics/LineLength: Line is too long. [92/80]
== spec/web/views/books/index_spec.rb ==
C:  6: 81: Metrics/LineLength: Line is too long. [91/80]
C: 16: 81: Metrics/LineLength: Line is too long. [81/80]
C: 22: 81: Metrics/LineLength: Line is too long. [85/80]
C: 32: 81: Metrics/LineLength: Line is too long. [81/80]
== spec/web/views/books/new_spec.rb ==
C:  5: 81: Metrics/LineLength: Line is too long. [118/80]
C:  7: 81: Metrics/LineLength: Line is too long. [89/80]

28 files inspected, 37 offenses detected

Cops disabled line ranges:

RuboCop failed!
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmmm. Let’s see what RuboCop’s “auto-correct” does to/for us:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rubocop -a apps lib spec
Inspecting 28 files
CCCCCCCCCCCC..C...C.....CCCC

Offenses:

apps/web/application.rb:5:3: C: Style/Documentation: Missing top-level class documentation comment.
  class Application &amp;lt; Hanami::Application
  ^^^^^
apps/web/application.rb:6:5: C: Metrics/BlockLength: Block has too many lines. [40/25]
    configure do ...
    ^^^^^^^^^^^^
apps/web/application.rb:21:21: C: [Corrected] Style/WordArray: Use %w or %W for an array of words.
      load_paths &amp;lt;&amp;lt; [ ...
                    ^
apps/web/application.rb:22:1: C: [Corrected] Layout/IndentArray: Use 2 spaces for indentation in an array, relative to the start of the line where the left square bracket is.
controllers 
^^^^^^^^^^^
apps/web/application.rb:22:12: C: [Corrected] Layout/TrailingWhitespace: Trailing whitespace detected.
controllers 
           ^
apps/web/application.rb:23:1: C: [Corrected] Layout/AlignArray: Align the elements of an array literal if they span more than one line.
views
^^^^^
apps/web/application.rb:23:6: C: [Corrected] Layout/MultilineArrayBraceLayout: Closing array brace must be on the line after the last array element when opening brace is on a separate line from the first array element.
views]
     ^
apps/web/application.rb:24:1: C: [Corrected] Layout/IndentArray: Indent the right bracket the same as the start of the line where the left bracket is.
]
^
apps/web/application.rb:236:40: C: [Corrected] Style/PercentLiteralDelimiters: %-literals should be delimited by ( and ).
      security.content_security_policy %{ ...
                                       ^^
apps/web/config/routes.rb:8:25: C: [Corrected] Style/SymbolArray: Use %i or %I for an array of symbols.
resources :books, only: [:index, :new, :create]
                        ^^^^^^^^^^^^^^^^^^^^^^^
apps/web/controllers/books/create.rb:2:8: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
module Web::Controllers::Books
       ^^^^^^^^^^^^^^^^^^^^^^^
apps/web/controllers/books/create.rb:3:3: C: Style/Documentation: Missing top-level class documentation comment.
  class Create
  ^^^^^
apps/web/controllers/books/index.rb:2:8: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
module Web::Controllers::Books
       ^^^^^^^^^^^^^^^^^^^^^^^
apps/web/controllers/books/index.rb:3:3: C: Style/Documentation: Missing top-level class documentation comment.
  class Index
  ^^^^^
apps/web/controllers/books/new.rb:1:8: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
module Web::Controllers::Books
       ^^^^^^^^^^^^^^^^^^^^^^^
apps/web/controllers/books/new.rb:2:3: C: Style/Documentation: Missing top-level class documentation comment.
  class New
  ^^^^^
apps/web/controllers/books/new.rb:5:5: C: [Corrected] Style/EmptyMethod: Put empty method definitions on a single line.
    def call(_params) ...
    ^^^^^^^^^^^^^^^^^
apps/web/controllers/home/index.rb:2:8: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
module Web::Controllers::Home
       ^^^^^^^^^^^^^^^^^^^^^^
apps/web/controllers/home/index.rb:3:3: C: Style/Documentation: Missing top-level class documentation comment.
  class Index
  ^^^^^
apps/web/controllers/home/index.rb:6:5: C: [Corrected] Style/EmptyMethod: Put empty method definitions on a single line.
    def call(_params) ...
    ^^^^^^^^^^^^^^^^^
apps/web/views/application_layout.rb:3:5: C: Style/Documentation: Missing top-level class documentation comment.
    class ApplicationLayout
    ^^^^^
apps/web/views/books/create.rb:2:8: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
module Web::Views::Books
       ^^^^^^^^^^^^^^^^^
apps/web/views/books/create.rb:3:3: C: Style/Documentation: Missing top-level class documentation comment.
  class Create
  ^^^^^
apps/web/views/books/index.rb:1:8: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
module Web::Views::Books
       ^^^^^^^^^^^^^^^^^
apps/web/views/books/index.rb:2:3: C: Style/Documentation: Missing top-level class documentation comment.
  class Index
  ^^^^^
apps/web/views/books/new.rb:1:8: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
module Web::Views::Books
       ^^^^^^^^^^^^^^^^^
apps/web/views/books/new.rb:2:3: C: Style/Documentation: Missing top-level class documentation comment.
  class New
  ^^^^^
apps/web/views/home/index.rb:2:8: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
module Web::Views::Home
       ^^^^^^^^^^^^^^^^
apps/web/views/home/index.rb:3:3: C: Style/Documentation: Missing top-level class documentation comment.
  class Index
  ^^^^^
lib/bookshelf.rb:1:1: C: Style/Documentation: Missing top-level module documentation comment.
module Bookshelf
^^^^^^
spec/features_helper.rb:9:7: C: Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
class MiniTest::Spec
      ^^^^^^^^^^^^^^
spec/web/controllers/books/create_spec.rb:4:1: C: Metrics/BlockLength: Block has too many lines. [32/25]
describe Web::Controllers::Books::Create do ...
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/web/controllers/books/create_spec.rb:13:81: C: Metrics/LineLength: Line is too long. [82/80]
    let(:params) { Hash[book: { title: 'Confident Ruby', author: 'Avdi Grimm' }] }
                                                                                ^^
spec/web/views/application_layout_spec.rb:1:9: C: [Corrected] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
require &quot;spec_helper&quot;
        ^^^^^^^^^^^^^
spec/web/views/application_layout_spec.rb:6:81: C: Metrics/LineLength: Line is too long. [90/80]
  let(:template) { Hanami::View::Template.new('apps/web/templates/application.html.erb') }
                                                                                ^^^^^^^^^^
spec/web/views/books/create_spec.rb:5:81: C: Metrics/LineLength: Line is too long. [92/80]
  let(:template)  { Hanami::View::Template.new('apps/web/templates/books/create.html.erb') }
                                                                                ^^^^^^^^^^^^
spec/web/views/books/index_spec.rb:6:81: C: Metrics/LineLength: Line is too long. [91/80]
  let(:template)  { Hanami::View::Template.new('apps/web/templates/books/index.html.erb') }
                                                                                ^^^^^^^^^^^
spec/web/views/books/index_spec.rb:16:81: C: Metrics/LineLength: Line is too long. [81/80]
      rendered.must_include('&amp;lt;p class=&quot;placeholder&quot;&amp;gt;There are no books yet.&amp;lt;/p&amp;gt;')
                                                                                ^
spec/web/views/books/index_spec.rb:22:81: C: Metrics/LineLength: Line is too long. [85/80]
    let(:book2)     { Book.new(title: 'Domain Driven Design', author: 'Eric Evans') }
                                                                                ^^^^^
spec/web/views/books/index_spec.rb:32:81: C: Metrics/LineLength: Line is too long. [81/80]
      rendered.wont_include('&amp;lt;p class=&quot;placeholder&quot;&amp;gt;There are no books yet.&amp;lt;/p&amp;gt;')
                                                                                ^
spec/web/views/books/new_spec.rb:5:81: C: Metrics/LineLength: Line is too long. [118/80]
  let(:params)    { OpenStruct.new(valid?: false, error_messages: ['Title must be filled', 'Author must be filled']) }
                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
spec/web/views/books/new_spec.rb:7:81: C: Metrics/LineLength: Line is too long. [89/80]
  let(:template)  { Hanami::View::Template.new('apps/web/templates/books/new.html.erb') }
                                                                                ^^^^^^^^^

28 files inspected, 42 offenses detected, 11 offenses corrected
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;11 of 42 offences were auto-corrected; not bad. Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/rake&lt;/code&gt; again tells us that nothing got (detectably) broken along the way.  The remaining offences fall into a limited number of categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubocop.readthedocs.io/en/latest/cops_style/#styledocumentation&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Style/Documentation&lt;/code&gt;&lt;/a&gt;: a class didn’t have a “top-level module documentation comment”, just as with Reek above;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubocop.readthedocs.io/en/latest/cops_metrics/#metricslinelength&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Metrics/LineLength&lt;/code&gt;&lt;/a&gt;: a line of code exceeded 80 character positions, and RuboCop auto-correct doesn’t support splitting those specific lines;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubocop.readthedocs.io/en/latest/cops_style/#stylefrozenstringliteralcomment&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Style/FrozenStringLiteralComment&lt;/code&gt;&lt;/a&gt;: a file parsed by a Ruby 2.2 or later interpreter does not have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# frozen_string_literal: true&lt;/code&gt; line, instructing the MRI interpreter to interpret strings as always “frozen”, in conformance with planned Ruby 3.0 behaviour;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubocop.readthedocs.io/en/latest/cops_style/#styleclassandmodulechildren&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Style/ClassAndModuleChildren&lt;/code&gt;&lt;/a&gt;: RuboCop flags “compact style” module/class definitions, in preference to nested module/class definitions. The Style Guide has &lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide#namespace-definition&quot;&gt;a good explanation&lt;/a&gt; of the rationale, which links to a &lt;a href=&quot;https://cirw.in/blog/constant-lookup.html&quot;&gt;good discussion of constant lookup in Ruby&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also one occurrence of &lt;a href=&quot;https://rubocop.readthedocs.io/en/latest/cops_metrics/#metricsblocklength&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Metrics/BlockLength&lt;/code&gt;&lt;/a&gt; in an auto-generated file.&lt;/p&gt;

&lt;p&gt;Fortunately, RuboCop supports &lt;a href=&quot;https://rubocop.readthedocs.io/en/latest/configuration/&quot;&gt;configuration&lt;/a&gt; using a configuration file and/or in-line comments; this will be useful here.&lt;/p&gt;

&lt;p&gt;First off, we’ll use a configuration file to disable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Style/Documentation&lt;/code&gt; cop globally. This, and the equivalent configuration for Reek, should be filed as an issue on a production-destined, as-generated codebase.&lt;/p&gt;

&lt;p&gt;Secondly, we’ll add a directive to the configuration file to disable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Metrics/BlockLength&lt;/code&gt; cop on the auto-generated file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps/web/application.rb&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Third, we’ll disable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Style/FrozenStringLiteralComment&lt;/code&gt; cop in the configuration file, with the same documented warning as for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Style/Documentation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we’ll reformat the too-long lines, which are &lt;em&gt;exclusively&lt;/em&gt; in specs.&lt;/p&gt;

&lt;p&gt;Finally, we’ll reformat the source files (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/features_helper&lt;/code&gt;) that use the “compact” module/class notation, ensuring that other cops (e.g., line length) are kept happy in that process.&lt;/p&gt;

&lt;h3 id=&quot;configuration-file&quot;&gt;Configuration File&lt;/h3&gt;

&lt;p&gt;Our configuration file, saved in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rubocop.yml&lt;/code&gt; in the project top-level directory, is as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;AllCops&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TargetRubyVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.4&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This is *temporary*; when we fix it, remember to update Reek config as well.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Style/Documentation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Exclude&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/**/*.rb&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;lib/bookshelf.rb&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;spec/features_helper.rb&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This is also *temporary*; Real Code&amp;amp;trade; sources should include the comment.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Style/FrozenStringLiteralComment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# It's likely that we'll eventually broaden this to include *all* specs.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Metrics/BlockLength&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Exclude&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/web/application.rb&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;spec/**/*.rb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reformatting-too-long-lines-in-specs&quot;&gt;Reformatting Too-Long Lines in Specs&lt;/h3&gt;

&lt;p&gt;Now, we need to edit each of the (spec) files which RuboCop marked as having too-long lines. We’ll use the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/web/controllers/books/create_spec.rb&lt;/code&gt; as an example, whose Line 13 currently reads:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;book: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Confident Ruby'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Avdi Grimm'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Changing that to&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;book: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Confident Ruby'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;author: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Avdi Grimm'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;remedies the RuboCop offence without affecting the function of the spec file. Modify the remaining line-length violations similarly.&lt;/p&gt;

&lt;h3 id=&quot;using-properly-nested-namespaces&quot;&gt;Using Properly-Nested Namespaces&lt;/h3&gt;

&lt;p&gt;We presently have nine files (eight under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps/web&lt;/code&gt; and one as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/features_helper.rb&lt;/code&gt;) with the “compact” module definition which, as noted earlier, is disallowed by the style guide enforced by RuboCop.&lt;/p&gt;

&lt;p&gt;The change required for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/features_helper.rb&lt;/code&gt; is simple and useful as an example. The existing code reopens the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MiniTest::Spec&lt;/code&gt; class like so:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MiniTest::Spec&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DSL&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Changing that to&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MiniTest&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Spec&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DSL&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;leaves specs running successfully, as verified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/rake&lt;/code&gt;, and removes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/features_helper.rb&lt;/code&gt; file from those complained about by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/rake rubocop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make similar changes to the eight remaining files, being careful not to introduce new violations such as excessive line length.&lt;/p&gt;

</description>
				<pubDate>Wed, 20 Dec 2017 00:00:00 +0800</pubDate>
				<link>/development/practices/2017/12/20/enthusiastically-poking-at-hanami.html</link>
				<guid isPermaLink="true">/development/practices/2017/12/20/enthusiastically-poking-at-hanami.html</guid>
			</item>
		
			<item>
				<title>Using Tools and/or Solving Problems</title>
				<description>&lt;p&gt;Are you a developer who views your job as primarily &lt;em&gt;solving problems&lt;/em&gt; or as &lt;em&gt;building and using tools?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Our culture has a word for when the second becomes overly separated from the first: &lt;em&gt;bike-shedding.&lt;/em&gt; Yet, no matter how diligently you focus on “accomplishing the original mission” or “moving the ball down the pitch” or whatever military/sports trope you like, at some point you’ll say to yourself “hey, I’ve been doing this same 37-step process every other day for the last month; I bet I could save &lt;em&gt;a lot&lt;/em&gt; of time by automating it.”&lt;/p&gt;

&lt;figure style=&quot;padding: 4rem 0;&quot;&gt;
&lt;img style=&quot;margin-left: 20%; width: 60%;&quot; src=&quot;https://imgs.xkcd.com/comics/is_it_worth_the_time.png&quot; alt=&quot;Is it worth the time? Probably not&quot; /&gt;
&lt;figcaption style=&quot;clear: both; text-align: center;&quot;&gt;Relevant &lt;a href=&quot;https://xkcd.com/1205/&quot;&gt;XKCD&lt;/a&gt; wisdom&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Raise your hand if you’ve &lt;em&gt;never&lt;/em&gt; &lt;strong&gt;far&lt;/strong&gt; overshot those limits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(deafening silence)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thought so. What brought this on, you ask? Funny you should ask.&lt;/p&gt;

&lt;p&gt;I’ve been a happy customer of &lt;a href=&quot;https://m.do.co/c/e3f4d7dea0e2&quot;&gt;Digital Ocean&lt;/a&gt; for a while now. Their VPSes (which they call &lt;em&gt;Droplets&lt;/em&gt;) come in either traditional bare-OS flavours (Ubuntu, CentOS, CoreOS, etc) and “one-click app” installations (Rails, Node.js, Docker, and so on). They have excellent &lt;a href=&quot;https://www.digitalocean.com/community/tags/api&quot;&gt;API documentation&lt;/a&gt; and &lt;a href=&quot;https://www.digitalocean.com/community/tutorials&quot;&gt;community tutorials&lt;/a&gt;, and are, &lt;em&gt;for the most part,&lt;/em&gt; a joy to work with and on.&lt;/p&gt;

&lt;p&gt;One of the tools they maintain and support is &lt;a href=&quot;https://github.com/digitalocean/doctl&quot;&gt;doctl&lt;/a&gt;, an open source tool with a relatively &lt;a href=&quot;https://github.com/digitalocean/doctl/releases&quot;&gt;mature and regular release history&lt;/a&gt;. This lets you create and manage Droplets and other Digital Ocean resources (like &lt;em&gt;Floating IP&lt;/em&gt;s, which let you, e.g., register an IP address with a domain registrar and move that IP between Droplets as you provision updates). However, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doctl&lt;/code&gt; tool, like the API it exercises, &lt;em&gt;does not&lt;/em&gt; easily support configuring and managing the software running &lt;em&gt;on&lt;/em&gt; a Droplet; for that, you’ll need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; or a tool like &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;, &lt;a href=&quot;https://www.packer.io/&quot;&gt;Packer&lt;/a&gt;, &lt;a href=&quot;https://buddy.works/&quot;&gt;Buddy&lt;/a&gt;, or a host of others.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And that’s where the &lt;strong&gt;rant&lt;/strong&gt; comes in.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve spent the last month, off and on, teaching myself enough Ansible to get by. I have two Droplets that I built and configured using Digital Ocean’s &lt;a href=&quot;https://cloud.digitalocean.com/droplets&quot;&gt;Web control panel&lt;/a&gt; a month ago; let’s call them &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server2&lt;/code&gt;. I can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doctl&lt;/code&gt; to manage them (power up/down, swap a Floating IP between them) as I wish; I can use &lt;em&gt;ad hoc&lt;/em&gt; Ansible commands like the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ansible -m shell -a 'docker pull jdickey/an-image:dev24' server2
server2 | SUCCESS | rc=0 &amp;gt;&amp;gt;
dev24: Pulling from jdickey/an-image
# ... ~30 lines of detailed logging...
8c5df88fde12: Verifying Checksum
8c5df88fde12: Download complete
8c5df88fde12: Pull complete
e2b2fc459b42: Pull complete
Digest: sha256:7a4f6098e01a5211b14b63428f9cdcd9929724bf83500f37745acfb1c3655181
Status: Downloaded newer image for jdickey/an-image:dev24
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s fine. Now I have two newer droplets (let’s call them &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo2&lt;/code&gt;) &lt;em&gt;configured identically to the first two&lt;/em&gt; that I created with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doctl&lt;/code&gt;, that I can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into but that Ansible gets blocked from:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh jeff@$DEMO2_IP
# ... banner ...
jeff@demo2:~$ docker ps -a
CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                NAMES
c74b5515f893        jdickey/an-image:dev24   &quot;/bin/sh -c 'pushs...&quot;   3 hours ago         Up 3 hours          0.0.0.0:80-&amp;gt;80/tcp   eager_meitner
jeff@demo2:~$ exit
$ ansible -=m shell -a 'docker ps -a' demo2
demo2 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false, 
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey).\r\n&quot;, 
    &quot;unreachable&quot;: true
}
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve had people suggest “Use Packer”, “Use this other tool”, “Nuke and reinstall Ansible”.&lt;/p&gt;

&lt;p&gt;In other words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t sweat the problem; keep swapping out tools until one of them Just Works.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aside from that being &lt;em&gt;horrifically&lt;/em&gt; bad devops practice, it doesn’t answer the real questions that urgently &lt;em&gt;need&lt;/em&gt; an answer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What changed in the DO Droplet provisioning between a month ago and now that broke Ansible? How do I get &lt;em&gt;Ansible&lt;/em&gt; working again with new Droplets?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because, &lt;em&gt;until and unless I have answers for those,&lt;/em&gt; I have &lt;em&gt;zero&lt;/em&gt; confidence in any other tool (or any other deployment provider, for that matter). If you don’t understand why your tools broke, then simply using new random tools won’t help you prevent, or at least react effectively to, the &lt;em&gt;new&lt;/em&gt; tools breaking. And the assumption you &lt;em&gt;must&lt;/em&gt; make is that they &lt;em&gt;will&lt;/em&gt; randomly break, until and unless experience shows you otherwise.&lt;/p&gt;

&lt;h3 id=&quot;postscripts&quot;&gt;Postscripts&lt;/h3&gt;

&lt;p&gt;I don’t mean to be casting aspersions on Digital Ocean, Ansible, Pusher, or the well-meaning but short-sighted folks telling me to “just get on with it, already”. I’ll bet that there’s some doc out there somewhere that I just happened to miss that tells me exactly what’s broken and why, and how to fix my process to deal with the change. If you know of such a thing, &lt;strong&gt;please&lt;/strong&gt; comment below or ping me on &lt;a href=&quot;https://twitter.com/jeff_dickey&quot;&gt;Twitter&lt;/a&gt; or Gitter.&lt;/p&gt;

</description>
				<pubDate>Fri, 04 Aug 2017 00:00:00 +0800</pubDate>
				<link>/practices/2017/08/04/use-tools-or-solve-problems.html</link>
				<guid isPermaLink="true">/practices/2017/08/04/use-tools-or-solve-problems.html</guid>
			</item>
		
			<item>
				<title>Developers Get Split Personalities</title>
				<description>&lt;p&gt;How many times have you trudged through brownfield code, say, from three months ago, and said to yourself “This is &lt;em&gt;manure;&lt;/em&gt; I can’t &lt;em&gt;believe&lt;/em&gt; [anyone] wrote this”, only to be told (by others or your memory) “we just needed to get it done and get on to the real work”?&lt;/p&gt;

&lt;p&gt;How many times have you discussed &lt;a href=&quot;https://blog.codinghorror.com/paying-down-your-technical-debt/&quot;&gt;technical debt&lt;/a&gt; with colleagues, or even read about it? How many times have you experienced, directly or vicariously, the phenomenon where technical debt, once accrued, too rarely gets paid down until/unless a Greek-finance-class crisis forces the team to stop “the real work” and do the &lt;em&gt;hard&lt;/em&gt; work of turning the house of cards you were trying to build “just sixteen more stories” onto into a steadfast, coherent foundation that you can (with proper discipline and respect) build &lt;em&gt;hundreds&lt;/em&gt; more stories on?&lt;/p&gt;

&lt;p&gt;How often has that exercise in austere self-discipline broken down, and you’ve agreed “screw this; we’ll write it again from scratch”, only to be back in the &lt;em&gt;exact same place&lt;/em&gt; a year or two down the “new” raod?&lt;/p&gt;

&lt;p&gt;Yeah, those are embarrassing numbers for me, too. I presently live in a society (Singapore) that is &lt;em&gt;existentially&lt;/em&gt; hostile to admission of even the most innocuous of failures, and is thus so risk-averse that we &lt;em&gt;suck&lt;/em&gt; at anything requiring creativity, teamwork, and/or original thought. (How many Singapore companies has the outside world heard of since Creative Labs, more than 30 years ago? How’s our national football team doing this year? Oh, yeah; we just got thrashed &lt;strong&gt;7-0&lt;/strong&gt; by Australia, whom we’ve never beaten.) And yet,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is no innovation and creativity without failure. Period. — Brené Brown&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can’t be perfect. We can’t make anything perfect; certainly not within our (imperfect) understanding of the limitations imposed on us by our (imperfect) economnic and social self-imposed realities. We &lt;em&gt;can&lt;/em&gt; be “good enough”. We &lt;em&gt;can&lt;/em&gt; “make things a bit better than they were before”. We &lt;em&gt;can&lt;/em&gt; follow the &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=1235624&amp;amp;seqNum=6&quot;&gt;Boy Scout Rule&lt;/a&gt; and “leave the campground” (our code) “cleaner than we found it”.&lt;/p&gt;

&lt;p&gt;We have some great tools to help us do that. If, for example, you work with Ruby code, you should be familiar with &lt;a href=&quot;https://rubocop.readthedocs.io/en/latest/&quot;&gt;RuboCop&lt;/a&gt;, &lt;a href=&quot;https://github.com/seattlerb/flog/&quot;&gt;Flog&lt;/a&gt;, &lt;a href=&quot;https://github.com/troessner/reek&quot;&gt;Reek&lt;/a&gt;, and &lt;a href=&quot;https://github.com/rrrene/inch&quot;&gt;Inch&lt;/a&gt;. They &lt;em&gt;can&lt;/em&gt; help you ship better code, faster — or they can help you launch yourself into an endless cycle of &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_triviality&quot;&gt;bike-shedding&lt;/a&gt; and navel-gazing that is usually broken only by a terminal event.&lt;/p&gt;

&lt;p&gt;That cycle &lt;em&gt;can,&lt;/em&gt; however, be broken by determined self-discipline. One of the more reliable ways to encourage that determination is to use at least some variant of &lt;a href=&quot;http://wiki.c2.com/?PairProgramming&quot;&gt;pair programming&lt;/a&gt;. Many of the foundational principles of modern development presume pairing; for example, in Sandi Metz’ classic &lt;a href=&quot;https://www.youtube.com/watch?v=npOGOmkxuio&amp;amp;feature=youtu.be&quot;&gt;Five Rules for Developers&lt;/a&gt; talk, at about &lt;a href=&quot;https://www.youtube.com/watch?v=npOGOmkxuio&amp;amp;feature=youtu.be&amp;amp;t=9m51s&quot;&gt;9:51&lt;/a&gt; she defines “Rule #6”, &lt;em&gt;Dispensation,&lt;/em&gt; as “Convince your pair!”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can break any rule you want, as long as you can talk someone into believing that it’s a good idea.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pragmatism for the win? Often. What the “rules” encourage, and the tools I mentioned above (among many others) encourage, is the creation of numerous small, granular objects without non-transient state. This makes a lot of sense in Web development that revolves around the request-response cycle. It also apparently nails Robert C. “Uncle Bob” Martin’s &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd&quot;&gt;Three Rules of TDD&lt;/a&gt;; if you’re writing the smallest new code that can make the smallest new tests that can possibly fail, pass, then you &lt;em&gt;should&lt;/em&gt; wind up with a collection of small, granular objects without much individual state.&lt;/p&gt;

&lt;p&gt;When you’re pairing, it’s a lot easier to maintain that discipline, after agreeing on what “smallest possible change” means. A feature? An object? A method? “It depends?” Whatever your convention, your pair is there to keep you out of the bike-shed and moving forward.&lt;/p&gt;

&lt;p&gt;When you’re not pairing, you &lt;em&gt;will&lt;/em&gt; spend a lot of time in the bikeshed, &lt;em&gt;especially&lt;/em&gt; if you have static analysis tools like RuboCop and Flog that you run in conjunction with or as &lt;em&gt;part of&lt;/em&gt; your commit and CI workflows. You start out being gently nudged by, say, Reek pointing out a &lt;a href=&quot;https://github.com/troessner/reek/blob/master/docs/Utility-Function.md&quot;&gt;Utility Function&lt;/a&gt; here and &lt;a href=&quot;https://github.com/troessner/reek/blob/master/docs/Feature-Envy.md&quot;&gt;Feature Envy&lt;/a&gt; there, and pretty soon you’re just…&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width:60%; margin-left:20%&quot; src=&quot;https://media.makeameme.org/created/shut-up-wesley.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you hunker down. You take your ten-method, hundred-line class that &lt;em&gt;worked&lt;/em&gt; and gave you a green bar with 100% test coverage, but also gave you a Flog score of 30+ on each of three methods and you had sixteen comments disabling Reek and five disabling RuboCop checks, and you turn it into twelve classes totalling 450 lines with no method longer than five lines or Flogging higher than a 7.0. You’re pleased with that, except for being faintly annoyed/guilty that it took you &lt;em&gt;three days&lt;/em&gt; to get there.&lt;/p&gt;

&lt;p&gt;Don’t let this happen to &lt;em&gt;you!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The tools aren’t giving you “bogus results”; you’re simply misusing them and/or the “agile” process you set out to use. On the one fork in the road, you spent three days (likely a couple thousand dollars’ worth of your time to your employer) fixing something that &lt;em&gt;already worked and was proven to work&lt;/em&gt; instead of moving on. “B-but, Reek and Flog and RuboCop said I had bad code,” you whimper. No, they didn’t; they said your code had some code smells (where bugs are &lt;em&gt;more likely&lt;/em&gt; but &lt;em&gt;not proven&lt;/em&gt; to be), and that it didn’t comply with some common-sense style standards that an open community discussion had agreed were &lt;em&gt;usually&lt;/em&gt; Good Ideas. But, again, “you can break any rule you want, as long as you can talk someone into believing that it’s a good idea”. The one thing you &lt;em&gt;can’t&lt;/em&gt; break as an agile developer is test coverage yielding a green bar; any code (statements, branches, conditionals) not covered by passing tests &lt;strong&gt;must&lt;/strong&gt; be presumed to be defective until and unless proven otherwise. (This is part of what makes writing tests first a Good Thing.) If you have solid, trustworthy tests, then the style guidelines and analysis metrics are just that — guidelines and metrics. When you find bugs that your tests didn’t catch, look to your guideline violations or egregious metric scores to help you narrow down likely places to look to figure out where the bug, or contributing factors to it, are hiding. Then write (passing) integration and unit tests (in that order) that exercise the bug; i.e., a green bar proves that the bug exists and that your understanding of it is correct (not necessarily &lt;em&gt;complete,&lt;/em&gt; but you can get there). Make that unit test fail and see if the integration test also fails. (If not, then killing the bug is going to take more work.) Finally, replace them with tests that prove that (that aspect of) the bug has been fixed, up to and including your integration testing. &lt;em&gt;These&lt;/em&gt; are the times that your static-analysis tools will help you  rather than distract you.&lt;/p&gt;

&lt;p&gt;“But aren’t high tool (Reek, Flog, disable-Rubocop-rule-comment count) scores indicative of technical debt,” you ask. Yes, they &lt;em&gt;indicate&lt;/em&gt; where you have code that likely could be improved, when it makes sense to do so taking resource constraints into consideration. You might want to keep a “technical debt” Trello card list or GitHub issue label, and write up cards and/or issues for each such instance. But no matter which flavour of agile development you use, &lt;em&gt;well-written tests&lt;/em&gt; are the primary artefact proving that you have working code. Remember the Golden Rule of Development. “He that has the gold, makes the rules?” No, the &lt;em&gt;practical&lt;/em&gt; Golden Rule,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Donald Knuth said that, in his &lt;em&gt;1974&lt;/em&gt; Turing Award lecture, &lt;a href=&quot;http://www.paulgraham.com/knuth.html&quot;&gt;&lt;em&gt;Computer Programming as an Art&lt;/em&gt;&lt;/a&gt; (CACM 17(12) p. 671). Forty-three years ago. Before the birth date of my average technical colleague over the last 15 years or so. If you came into the craft from a &lt;a href=&quot;https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/&quot;&gt;JavaSchool&lt;/a&gt; or a “bootcamp”, you’ve probably never read him. That’s a bug, not a feature.&lt;/p&gt;
</description>
				<pubDate>Sun, 23 Jul 2017 00:00:00 +0800</pubDate>
				<link>/practices/2017/07/23/developers-get-split-personalities.html</link>
				<guid isPermaLink="true">/practices/2017/07/23/developers-get-split-personalities.html</guid>
			</item>
		
	</channel>
</rss>
